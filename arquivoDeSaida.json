{
  "comments": [
    {
      "message": "for more rules see: https://commitlint.js.org/#/reference-rules"
    },
    {
      "message": "parserPreset: 'conventional-changelog-atom',"
    },
    {
      "message": " rules: { 'type-enum': [2, 'always', ['foo']], },"
    },
    {
      "message": "eslint-env es6"
    },
    {
      "message": "Resolve and load @commitlint/config-conventional from node_modules.* Referenced packages must be installed"
    },
    {
      "message": "Resolve and load conventional-changelog-atom from node_modules.* Referenced packages must be installed"
    },
    {
      "message": "Resolve and load @commitlint/format from node_modules.* Referenced package must be installed"
    },
    {
      "message": "Any rules defined here will override rules from @commitlint/config-conventional"
    },
    {
      "message": "Functions that return true if commitlint should ignore the given message."
    },
    {
      "message": "Whether commitlint uses the default ignore rules."
    },
    {
      "message": "Custom URL to show upon failure"
    },
    {
      "message": "Custom prompt configs"
    },
    {
      "message": "pre-commit==2.19.0gitlint==0.17.0"
    },
    {
      "message": "!/usr/bin/env bash"
    },
    {
      "message": "/../}\") # add ../ to each element"
    },
    {
      "message": "--ignore-unknown prevents prettier from complaining about file types it doesn't know about"
    },
    {
      "message": "!/usr/bin/env bash"
    },
    {
      "message": "/../}\") # add ../ to each element"
    },
    {
      "message": "gets the list of modified files via git diff, and removes the schema/deploy prefix, and the .sql suffix to match the sqitch plan change name"
    },
    {
      "message": "finds the last tag in the sqitch plan in the base branch"
    },
    {
      "message": "reads the sqitch.plan from the end and stops at the last tag that was on the base branch"
    },
    {
      "message": " !/usr/bin/env bash We consider any sqitch change prior to a tag to be immutable, as it may already be released to production, and should not be reverted This script checks whether those changes were modified in the current dir since the base branch and returns an error if that is the case usage: sqitch-immutable-files.sh schema_dir base_branch"
    },
    {
      "message": " comm compares two ordered files and returns three columns \"-23\" suppresses colums 2 and 3, so it only returns the first column (the lines unique to file 1)"
    },
    {
      "message": "!/usr/bin/env bash"
    },
    {
      "message": " Usage sqitch-last-change-is-tag.sh path/to/schema/dir tests if the last change of the sqitch plan file is a tag"
    },
    {
      "message": " \"react/prop-types\": 0, // don't need react/prop-types when components are typed with typescript \"react/state-in-constructor\": [1, \"never\"], \"@typescript-eslint/no-unused-expressions\": [1, { allowTernary: true }], \"import/prefer-default-export\": 0, \"no-plusplus\": 0, // not sure why this would be needed when we require semicolons \"jsx-a11y/anchor-is-valid\": 0, // Next.js's Link component inject the href in our <a> elements \"no-restricted-syntax\": 0, \"import/no-extraneous-dependencies\": [ \"error\", { devDependencies: [\"tests/**/*\", \"cypress/**/*\"] }, ],"
    },
    {
      "message": " \"global-require\": 0, \"no-underscore-dangle\": 0, \"no-undef\": 0, // This is covered by Typescript, no need for eslint to check that"
    },
    {
      "message": " // Rules below are code style. Prettier should deal with that instead of eslint \"spaced-comment\": 0, \"import/newline-after-import\": 0, \"import/order\": 0, \"@typescript-eslint/lines-between-class-members\": 0, we are not using flow,"
    },
    {
      "message": "\", \"cypress"
    },
    {
      "message": ""
    },
    {
      "message": ""
    },
    {
      "message": "allows functions to be called with null arguments"
    },
    {
      "message": "load values from .env"
    },
    {
      "message": "renamed from ENABLE_DB_MOCKS"
    },
    {
      "message": "In case default host is used with non-default port"
    },
    {
      "message": "eslint-disable-next-line import/no-extraneous-dependencies"
    },
    {
      "message": "eslint-disable-next-line import/extensions"
    },
    {
      "message": " We've imported your old cypress plugins here. You may want to clean this up later by importing these."
    },
    {
      "message": " / <reference types=\"next\" /> / <reference types=\"next/image-types/global\" />"
    },
    {
      "message": " NOTE: This file should not be edited see https://nextjs.org/docs/basic-features/typescript for more information."
    },
    {
      "message": " Set to false to create a sentry release on build with the sentry CLI This will upload sourcemaps to sentry."
    },
    {
      "message": " This file configures the initialization of Sentry on the browser. The config you add here will be used whenever a page is visited. https://docs.sentry.io/platforms/javascript/guides/nextjs/"
    },
    {
      "message": " This file configures the initialization of Sentry on the server. The config you add here will be used whenever the server handles a request. https://docs.sentry.io/platforms/javascript/guides/nextjs/"
    },
    {
      "message": "hide the submit button"
    },
    {
      "message": "This is to keep compatibility with the progressive rendering"
    },
    {
      "message": "For when redirected from project revision"
    },
    {
      "message": "Based on router queries we can determine if the user is coming from project contact form"
    },
    {
      "message": "If we don't have the projectContactFormId(means we don't have the primary contact form either) we need to create one"
    },
    {
      "message": "If we don't have the projectContactFormId(means we don't have the primary contact form either) we need to create one"
    },
    {
      "message": " Invalidate the entire store, to make sure that we don't display any stale data after redirecting to the next page. This could be optimized to only invalidate the affected records."
    },
    {
      "message": "comparing today with TEIMP end date"
    },
    {
      "message": "@ts-ignore"
    },
    {
      "message": " only run the effect on mount eslint-disable-next-line react-hooks/exhaustive-deps"
    },
    {
      "message": "Function to create a new contact form change and redirect to it"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the annual reports page)"
    },
    {
      "message": "If we are showing the diff then we want to see archived records, otherwise filter out the archived reports"
    },
    {
      "message": "Sorting the annual report form changes by the reporting requirement index"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "Show this part if none of Annual report form properties have been updated"
    },
    {
      "message": "Show this part if the whole Annual report has been removed"
    },
    {
      "message": "You only need to include the optional arguments when using this function to create the schema for the summary (read-only) page."
    },
    {
      "message": "This function aims to prevent race condition for the if-else statement below"
    },
    {
      "message": "Create primary contact when adding new secondary contact to the project if there is no primary contact"
    },
    {
      "message": "the failing mutation will display an error message and send the error to sentry"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": "allForms is already sorted by contactIndex"
    },
    {
      "message": "if the primary contact not yet added, we pass 2 as the contactIndex and create the primary contact in the addContact function"
    },
    {
      "message": " Will remove the primary contact form change if it is not filled out and we have only one secondary contact form Also, using the undoFormChanges mutation won't work here because it will bring back the primary contact form change"
    },
    {
      "message": "Using short circuit doesn't work here, It renders a useless submit button"
    },
    {
      "message": "Using short circuit doesn't work here, It renders a useless submit button"
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the contacts page)"
    },
    {
      "message": "If we are showing the diff then we want to see archived records, otherwise filter out the archived contacts"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "we need to check previous value since this form and the project managers form are rendered under same CollapsibleFormWidget"
    },
    {
      "message": "setting this to true so that the text is \"Secondary Contacts not added\""
    },
    {
      "message": "passing content suffix to fields that need nominator and denominator (example: tCO2e/GJ)"
    },
    {
      "message": "setting a deep copy of the ui schema to avoid mutating the original"
    },
    {
      "message": "Example: tCO2e/GJ if we have emissionFunctionalUnit"
    },
    {
      "message": "We only show the label of this field on view mode and summary page"
    },
    {
      "message": "Mutations"
    },
    {
      "message": "Restructure form data to be in the same format as the schema"
    },
    {
      "message": "don't trigger a change if the form data is an empty object"
    },
    {
      "message": "Expand TEIMP reporting and Upon Completion data to the top level of the form data"
    },
    {
      "message": "We need to set the ui:FieldTemplate to the EmptyFieldTemplate* and ui:ObjectFieldTemplate to the EmptyObjectFieldTemplate* to avoid showing field labels and outlines on parent object.* There is room for improvement on how this is done* but for now it is the best solution."
    },
    {
      "message": "We should ideally offload the parsing of this data to a custom commit handler on the database.* Opportunity for future tech debt work captured in ZenHub."
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the overview page)"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "Growthbook - teimp"
    },
    {
      "message": "Show this part if none of the emission intensity report form properties have been updated"
    },
    {
      "message": "Show this part if the whole emission intensity report has been removed"
    },
    {
      "message": "You only need to include the optional arguments when using this function to create the schema for the summary (read-only) page."
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the overview page)"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "Mutations"
    },
    {
      "message": "We should explicitly filter out archived form changes here (filtering on the fragment doesn't work)"
    },
    {
      "message": "putting the conditional directly in the mutation throws errors"
    },
    {
      "message": "don't trigger a change if the form data is an empty object"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": " Default to 50% Default to 10%"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the overview page)"
    },
    {
      "message": "If we are showing the diff then we want to see archived records, otherwise filter out the archived contacts"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "This condition handles the case where the form is archived"
    },
    {
      "message": "setting this to true so that the text is \"Additional Funding Source not added\""
    },
    {
      "message": "You only need to include the optional arguments when using this function to create the schema for the summary (read-only) page."
    },
    {
      "message": "Dynamically build the schema from the list of cif_users"
    },
    {
      "message": "Update an existing project_manager form change if it exists, otherwise create one"
    },
    {
      "message": "If a form_change already exists, and the payload contains a cifUserId update it"
    },
    {
      "message": "If a form_change does not exist, and the payload contains a cifUserId create a form_change record"
    },
    {
      "message": "a temporary fix to make sure the form change operation is set correctly"
    },
    {
      "message": "the failing mutation will display an error message and send the error to sentry"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the managers page)"
    },
    {
      "message": "If we are showing the diff then we want to see archived records, otherwise filter out the archived managers"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "Opportunity for a refactor here to populate the anyOf array on the server with a computed column"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": "retrieving calculated amounts from newFormData rather than using the calculated fields directly to avoid discrepencies between front-end and payments table"
    },
    {
      "message": "Sort consolidated milestone form change records"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "setting this to true so that the text is \"Milestone Reports not added\""
    },
    {
      "message": " If we are showing the diff then we want to see archived records, otherwise filter out the archived milestone reports"
    },
    {
      "message": "Show this part if none of milestone report form properties have been updated"
    },
    {
      "message": "Show this part if the whole milestone report has been removed"
    },
    {
      "message": "Get all form changes ids to get used in the undo changes button"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Show diff if it is not the first revision and not view only (rendered from the quarterly report page)"
    },
    {
      "message": "If we are showing the diff then we want to see archived records, otherwise filter out the archived quarterly reports"
    },
    {
      "message": "Sorting the quarterly report form changes by the reporting requirement index"
    },
    {
      "message": "Defines if all quarterly reports are pristine"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "Update the hasDiff state in the CollapsibleFormWidget to define if the form has diffs to show"
    },
    {
      "message": "setting this to true so that the text is \"Quarterly Reports not added\""
    },
    {
      "message": "Show this part if none of the quarterly reports' form properties have been updated"
    },
    {
      "message": "Show this part if the whole quarterly report has been removed"
    },
    {
      "message": "mutations"
    },
    {
      "message": "Show diff if it is not the first revision and the view only"
    },
    {
      "message": "Set custom rjsf fields to display diffs"
    },
    {
      "message": "Set the formSchema and formData based on showing the diff or not"
    },
    {
      "message": "todo: not displaying when reviewing changes"
    },
    {
      "message": "This file contains the common components used in the different form summary pages.* FormRemoved: is used to show a message when a form has been removed and it shows different styles depending on the page.* FormNotAddedOrUpdated: is used to show a message when a form has not been added or updated depending on wether it is the first revision or not."
    },
    {
      "message": "No need to show `removed` on Amendments/Revisions page"
    },
    {
      "message": "schema dependencies"
    },
    {
      "message": "Specific filter function for the milestone schema that*  - flattens the existing schema*  - removes the properties not in the form change data*  - returns the pruned, flat schema and only the form change data that changed since the previous version** @param formSchema* @param formChange* @returns {{formSchema: JSONSchema7, formData: any}}"
    },
    {
      "message": "the failing mutation will display an error message and send the error to sentry"
    },
    {
      "message": "These generic functions are for use in the ProjectMilestoneReportForm, ProjectQuarterlyReportForm and ProjectAnnualReportForm components.* The report forms all need to handle CRUD operations for reporting_requirement form_change records in an identical way.* Staging the forms before submit and sorting the forms by index are also shared functionality of these components."
    },
    {
      "message": "Deprecated - When refactoring forms, we should use the * `stageMultipleReportingRequirementFormChange` function instead"
    },
    {
      "message": "The mutation used here is dependent on whether a reportType is passed in.If a reportType is passed, we use the default mutationFn parameter. If not, we use the optional parameter updateFormChangeMutationFnto handle staging. Doing this allows us to stage all dependent form_change records for a report together & definehow to update each those form_change records."
    },
    {
      "message": "@param formChangeEdges the edges, containing nodes of graphQL type FormChange* @param keepArchivedReports if set to true, archived reports won't be pruned (for summary displays)* @returns a tuple containing the reports sorted by reportingRequirementIndex, and the next index available"
    },
    {
      "message": "the failing mutation will display an error message and send the error to sentry"
    },
    {
      "message": "This is the redirect call passed from the NextJS form index page"
    },
    {
      "message": "We don't want a front end navigation here,to ensure that a back-end redirect is performed when clicking on the banner image"
    },
    {
      "message": "eslint-disable react/no-danger"
    },
    {
      "message": "eslint-enable react/no-danger"
    },
    {
      "message": "Current date without time information"
    },
    {
      "message": "This has to be true to start with, otherwise it will prevent the children from rendering"
    },
    {
      "message": "need the specificity to override the default"
    },
    {
      "message": "eslint-disable relay/must-colocate-fragment-spreads"
    },
    {
      "message": "controlling form data like this is necessary because of this bug: https://github.com/rjsf-team/react-jsonschema-form/issues/1023"
    },
    {
      "message": "Custom widget to update the revision status"
    },
    {
      "message": "helper function to compare the initial value to the current value"
    },
    {
      "message": "not using strict equality because the value can be a string or a number when getting the value from the UI and we need the type coercion"
    },
    {
      "message": "const { id } = formContext.projectRevision; //TODO: bring this back when we have the mutation"
    },
    {
      "message": "set the text next to the button based on whether the value has changed or not"
    },
    {
      "message": " import { UseDebouncedMutationConfig } from \"mutations/useDebouncedMutation\"; //TODO: bring this back when we have the mutation import { Disposable, MutationParameters } from \"relay-runtime\"; //TODO: bring this back when we have the mutation"
    },
    {
      "message": " mutationFnHook: () => [ (config: UseDebouncedMutationConfig<MutationParameters>) => Disposable, boolean ] //TODO: bring this back when we have the mutation fieldNameToUpdate: string, //TODO: bring this back when we have the mutation formDataTableName: string //TODO: bring this back when we have the mutation"
    },
    {
      "message": " const [updateFn, isUpdating] = mutationFnHook(); //TODO: bring this back when we have the mutation TODO: remove this once we have the mutation"
    },
    {
      "message": " to compare the initial value to the current value TODO: remove this once we have the mutation eslint-disable-next-line @typescript-eslint/no-unused-vars"
    },
    {
      "message": " TODO: We might use something like this once we have the mutation const updatePatch = { [fieldNameToUpdate]: value, };"
    },
    {
      "message": " TODO: We might use something like this once we have the mutation return new Promise((resolve, reject) => updateFn({ variables: { input: { id: id, projectRevisionPatch: updatePatch, }, }, optimisticResponse: { updateFn: { projectRevision: { id: id, }, }, }, onCompleted: () => { setUpdated(true); TODO: need to add this once we have the mutation setInitialValue(value); TODO: need to add this once we have the mutation setInformationalText(\"Updated\"); TODO: need to add this once we have the mutation }, onError: reject, debounceKey: id, }) );"
    },
    {
      "message": "A factory function that creates a Field/Widget/React component for a routinely updated field.** @param Widget The widget to wrap like a TextWidget, SelectWidget, etc.* @param mutationFnHook The hook that returns the mutation function and a boolean indicating whether the mutation is in progress* @param fieldNameToUpdate The name of the field to update (e.g. \"status\")* @param formDataTableName The name of the form data table to use for updating the field (e.g. \"project\")* @returns a React component that wraps the widget and adds the update button and functionality** How to use:* 1. Create a mutation function hook that returns the mutation function and a boolean indicating whether the mutation is in progress* 2. Create a field/widget component inside the form component using this factory function* 3. Add the field/widget component to the form widgets prop* 4. Replace the widget in the ui-widget of the UISchema with this newly created field/widget component* 5. Pass the `projectRevision` object to the form context"
    },
    {
      "message": "eslint-disable-next-line relay/graphql-syntax"
    },
    {
      "message": "A section has form configuration items that need to be rendered,* A section can also have its own form configuration to render"
    },
    {
      "message": "By default, start with the component open if the submittedDate is empty"
    },
    {
      "message": "Rendering hidden children is necessary in case they contain form elements with validation"
    },
    {
      "message": "The relay fragment"
    },
    {
      "message": "The title of the link to display in this component.* e.g. \"Quarterly Report\" to display \"Quarterly Report <reportIndex>\""
    },
    {
      "message": " This effect only needs to be run once on mount, even if the relay environment changes eslint-disable-next-line react-hooks/exhaustive-deps"
    },
    {
      "message": "reset the local state when the prop changes"
    },
    {
      "message": " using a state update with a callback ensures that we always have a reference to the latest searchFilters especially when this handler is fired multiple times in quick sucession, without the component updating which can happen when a single filter component handles multiple variables"
    },
    {
      "message": "copy the vars from the query string, so that the args coming from extraFilters are not overriden"
    },
    {
      "message": " At this point the data for the query should be cached, so we can update the route and re-render without suspending"
    },
    {
      "message": " fetchQuery will fetch the query and write the data to the Relay store. This will ensure that when we re-render, the data is already cached and we don't suspend See https://github.com/facebook/relay/blob/b8e78ca0fbbfe05f34b4854484df574d91ba2113/website/docs/guided-tour/refetching/refetching-queries-with-different-data.md#if-you-need-to-avoid-suspense"
    },
    {
      "message": " if the query fails, we still want to update the route, which will retry the query and let a 500 page be rendered if it fails again"
    },
    {
      "message": "The top-level query used by the page rendenring the table.* If provided, when the table filters, ordering or pagination are updated,* the table will reload the query before updating the router,* preventing a render with the Suspense fallback while the new data is being fetched."
    },
    {
      "message": "class name is used to increase specificity of CSS selectors and override defaults"
    },
    {
      "message": "The total number of items in all of the pages"
    },
    {
      "message": "Defaults to DEFAULT_PAGE_SIZE."
    },
    {
      "message": "The number of items to skip to get to the current page. Defaults to 0"
    },
    {
      "message": "This can be used as a UI trick to save space for the search/reset buttons"
    },
    {
      "message": "A filter that converts the input to a numerical value when submitting it"
    },
    {
      "message": "The name of the relay argument that this filter manages."
    },
    {
      "message": "The prefix to use when generating the orderBy argument for this filter.* Defaults to an uppercase version of the argName.* e.g. \"projectName\" => \"PROJECT_NAME\""
    },
    {
      "message": "The array of all relay arguments managed by this filter.* Most filters will manage a single argument, but some may manage more,* e.g. to control both an \"isEqual\" and an \"isNull\" relay filter.* Used to know which arguments should be removed from the query when the filters are reset"
    },
    {
      "message": " The JSON string is tripping up eslint eslint-disable-next-line relay/graphql-syntax"
    },
    {
      "message": " We only want to run this effect on mount, so we use an empty array as a dependency. eslint-disable-next-line react-hooks/exhaustive-deps"
    },
    {
      "message": "A section has form configuration items that need to be rendered,* A section can also have its own form configuration to render"
    },
    {
      "message": "Tasklist section is expanded if:* - either the current step is one of its form items,* - or if any of its form items has the Attention Required status"
    },
    {
      "message": "Project Summary Section"
    },
    {
      "message": "Amendments & Other Revisions section"
    },
    {
      "message": "Attachments Section"
    },
    {
      "message": "Remove the default button styles"
    },
    {
      "message": "This padding is to make the button outline looks better on focus"
    },
    {
      "message": "Remove the default button styles"
    },
    {
      "message": "This padding is to make the button outline looks better on focus"
    },
    {
      "message": "a workaround for the styled-jsx <style jsx> boolean property issue (see:https://github.com/vercel/next.js/issues/3432)"
    },
    {
      "message": "Current date without time information"
    },
    {
      "message": "No status as there are no milestones"
    },
    {
      "message": " TODO add tests for document upload/download once the storage service is round-tripping describe(\"The attachments component\", () => { it(\"uploads a file\", () => { cy.visit(\"/upload\"); cy.get('[data-cy=\"file-input\"]').attachFile(\"cif-test-document.docx\"); }); });"
    },
    {
      "message": "TODO: the entire body should be tested for accessibility"
    },
    {
      "message": "TODO: the entire body should be tested for accessibility"
    },
    {
      "message": "click twice for descending order"
    },
    {
      "message": "below code is not a duplicate, we need to click the field twice to get the DESC sort"
    },
    {
      "message": "just to wait for the page to load"
    },
    {
      "message": "just to wait for the page to load"
    },
    {
      "message": "checking the view page for a specific revision"
    },
    {
      "message": "TODO: the entire body should be tested for accessibility"
    },
    {
      "message": "click twice for descending order"
    },
    {
      "message": "months are zero-indexed"
    },
    {
      "message": "add new"
    },
    {
      "message": "add overview"
    },
    {
      "message": "add managers"
    },
    {
      "message": "add contacts"
    },
    {
      "message": "add budgets, expenses, and payments"
    },
    {
      "message": "checking default values"
    },
    {
      "message": "add milestone reports"
    },
    {
      "message": "add emissions intensity reports"
    },
    {
      "message": "Add Quarterly Reports"
    },
    {
      "message": "No annual reports"
    },
    {
      "message": "review and submit"
    },
    {
      "message": "project overview section"
    },
    {
      "message": "funding agreement section"
    },
    {
      "message": "additional funding sources section"
    },
    {
      "message": "project managers section"
    },
    {
      "message": "project contacts section"
    },
    {
      "message": "TEIMP section"
    },
    {
      "message": "this checks that the project view list shows the milestone report status vs. the other report statuses"
    },
    {
      "message": "this test only checks the mandatory and IA-specific forms. The other forms are already tested above in the EP project creation test"
    },
    {
      "message": "add new"
    },
    {
      "message": "add overview"
    },
    {
      "message": "add budgets, expenses, and payments"
    },
    {
      "message": "checking default values"
    },
    {
      "message": "project summary form"
    },
    {
      "message": "review and submit"
    },
    {
      "message": "project overview section"
    },
    {
      "message": "funding agreement section"
    },
    {
      "message": "additional funding sources section"
    },
    {
      "message": "project summary report section"
    },
    {
      "message": "add new"
    },
    {
      "message": "Checking multiple query parameters in the url"
    },
    {
      "message": "Add new contact"
    },
    {
      "message": "Back to project contact form"
    },
    {
      "message": "add new"
    },
    {
      "message": "add budgets, expenses, and payments"
    },
    {
      "message": "add teimp reports"
    },
    {
      "message": "generate quarterly reports"
    },
    {
      "message": "generate annual reports"
    },
    {
      "message": "add new project with EP funding stream"
    },
    {
      "message": "Discard this revision to test the other funding stream"
    },
    {
      "message": "change project funding stream to IA"
    },
    {
      "message": "edit overview -- change project name"
    },
    {
      "message": "edit managers -- delete a manager"
    },
    {
      "message": "edit contacts -- add a secondary contact"
    },
    {
      "message": "current flow for reaching to the project amendment/revision"
    },
    {
      "message": "checking the view page for a draft revision"
    },
    {
      "message": "just checking one of other forms are not checked"
    },
    {
      "message": " Screenshot below is commented out because of flakiness. Documented in ticket #1194. cy.happoAndAxe(\"Project Revision View\", \"Forms Updated\", \"main\", true);"
    },
    {
      "message": "months are zero-indexed"
    },
    {
      "message": "edit overview -- change project name"
    },
    {
      "message": "edit managers -- delete a manager"
    },
    {
      "message": "edit contacts -- add a secondary contact"
    },
    {
      "message": "edit budgets, expenses, and payments -- change funding agreement"
    },
    {
      "message": "edit additional funding source"
    },
    {
      "message": "edit milestone reports -- change date"
    },
    {
      "message": "edit quarterly reports -- delete a report"
    },
    {
      "message": "two below assertions are not necessary, but it's needed to slow down the test and run the accessibility checks correctly"
    },
    {
      "message": "edit teimp"
    },
    {
      "message": "edit annual reports -- change comments"
    },
    {
      "message": "check diffs"
    },
    {
      "message": "Verify that the revision can be accessed by other users"
    },
    {
      "message": "Navigate back to the Review and Submit information page"
    },
    {
      "message": "Allow the component to finish saving before taking screenshot"
    },
    {
      "message": "months are zero-indexed"
    },
    {
      "message": "NEW"
    },
    {
      "message": "OVERVIEW"
    },
    {
      "message": "PROJECT DETAILS"
    },
    {
      "message": "MANAGERS"
    },
    {
      "message": "CONTACTS"
    },
    {
      "message": "BUDGETS, EXPENSES AND PAYMENTS"
    },
    {
      "message": "checking default values"
    },
    {
      "message": "MILESTONE REPORTS"
    },
    {
      "message": "QUARTERLY REPORTS"
    },
    {
      "message": "Emissions Intensity Report"
    },
    {
      "message": "Annual reports"
    },
    {
      "message": "SUMMMARY"
    },
    {
      "message": "NEW"
    },
    {
      "message": "BUDGETS, EXPENSES AND PAYMENTS"
    },
    {
      "message": "PROJECT SUMMARY REPORT"
    },
    {
      "message": "SUMMMARY"
    },
    {
      "message": "budgets, expenses, and payments"
    },
    {
      "message": "additional funding sources"
    },
    {
      "message": "TODO: TEIMP Agreement, when fixture is added"
    },
    {
      "message": "filter by \"IA\""
    },
    {
      "message": "budgets, expenses, and payments"
    },
    {
      "message": "additional funding sources"
    },
    {
      "message": "project summary report"
    },
    {
      "message": "load more projects to trigger unique proposal reference error"
    },
    {
      "message": "NEW"
    },
    {
      "message": "OVERVIEW"
    },
    {
      "message": "Renders the default error message for a required field"
    },
    {
      "message": "BUDGETS, EXPENSES AND PAYMENTS"
    },
    {
      "message": "MILESTONE REPORTS"
    },
    {
      "message": "Emissions intensity report"
    },
    {
      "message": "QUARTERLY REPORTS"
    },
    {
      "message": "Annual reports"
    },
    {
      "message": "load more projects to trigger unique proposal reference error"
    },
    {
      "message": "NEW"
    },
    {
      "message": "BUDGETS, EXPENSES AND PAYMENTS"
    },
    {
      "message": " Screenshot below is commented out because of flakiness. Documented in ticket #1194. cy.happoAndAxe(\"IA Project budgets Form\", \"empty\", \"main\"); checking default values"
    },
    {
      "message": " temporarily removing this flaky screenshot until a permanent fix is in place cy.happoAndAxe( \"Emissions intensity report Form\", \"with errors\", \".error-detail\" );"
    },
    {
      "message": " Screenshot below is commented out because of flakiness. Documented in ticket #1194. cy.happoAndAxe( \"IA Project funding agreement Form\", \"with errors\", \".error-detail\" );"
    },
    {
      "message": "undo managers"
    },
    {
      "message": "undo contacts"
    },
    {
      "message": "undo budgets, expenses and payments"
    },
    {
      "message": "undo additional funding source"
    },
    {
      "message": "undo TEIMP agreement"
    },
    {
      "message": "undo quarterly reports"
    },
    {
      "message": "undo annual reports"
    },
    {
      "message": "undo milestone reports"
    },
    {
      "message": "undo overview"
    },
    {
      "message": "undo managers"
    },
    {
      "message": "undo contacts"
    },
    {
      "message": "undo budgets, expenses and payments"
    },
    {
      "message": "undo additional funding source"
    },
    {
      "message": "undo milestone reports"
    },
    {
      "message": "undo quarterly reports"
    },
    {
      "message": "undo annual reports"
    },
    {
      "message": "eslint-disable-next-line @typescript-eslint/no-unused-vars"
    },
    {
      "message": "@type {Cypress.PluginConfig}"
    },
    {
      "message": "pluck specific keys to keep the table readable"
    },
    {
      "message": "Open the login page, fill in the form with username and password and submit."
    },
    {
      "message": "This should be more strict depending on your login page template."
    },
    {
      "message": "need to return a Cypress promise (could be any cy. command) to let Cypress know that it has to wait for this call"
    },
    {
      "message": "Extra assertion to wait for the new milestone report to be added"
    },
    {
      "message": "need to return a Cypress promise (could be any cy. command) to let Cypress know that it has to wait for this call"
    },
    {
      "message": "Extra assertion to wait for the new milestone report to be added"
    },
    {
      "message": "need to return a Cypress promise (could be any cy. command) to let Cypress know that it has to wait for this call"
    },
    {
      "message": "holdback percentage is for EP projects only"
    },
    {
      "message": "datepicker indexes months from 0, luxon indexes from 1"
    },
    {
      "message": " There is a bug where if cypress starts changing another form on the page too quickly, the last change is discarded and rjsf throws an error."
    },
    {
      "message": "Utility to match GraphQL operation based on the operation name"
    },
    {
      "message": "Alias operation if operationName matches"
    },
    {
      "message": "Any custom formats defined here must also be defined in app/server/middleware/graphql/validateRecord.ts to make AJV aware of them.* Example: ajv.addFormat('<format_name>', <regex>);"
    },
    {
      "message": " Disabling the rules of hooks below is okay, as long as they are not disabled in the component that uses this hook."
    },
    {
      "message": "Returns a function that can be used to discard a form change,* e.g. remove a project_contact or project_manager from a pending project_revision.* If the form change was created in the same project revision, i.e. if its operation is \"CREATE\", it will be deleted.* If the form change was created in a different project revision, i.e. if its operation is \"UPDATE\", its operation will be updated to \"ARCHIVE\".* @param connectionId an optional connection id to update when the form change is deleted* @returns"
    },
    {
      "message": "Hook to check if the given userGroups makes the user an admin* @returns {boolean} Memoized boolean value"
    },
    {
      "message": "Hook that returns true if the router will redirect, false otherwise.*  - Example usage:*    const isRedirecting = useRedirectTo404IfFalsy(object);*    if(isRedirecting) return null;"
    },
    {
      "message": "Hook that redirects to the contacts list page, if the contact being viewed is committed and the `preventRedirect` flag is false.*  If the redirect is happening, then the hook returns true, and false otherwise."
    },
    {
      "message": "Hook that returns true if the project revision being viewed is not the latest project revision,*  the latest project revision id is not null, and shouldRedirect is true.*  False otherwise."
    },
    {
      "message": "Hook that returns true if the formIndex is out of bounds of the formPages array,*  and redirects to the first page of the form.*  False otherwise."
    },
    {
      "message": " Function takes a string as a parameter & returns a parsed JSON object if valid JSON, {} if not valid. Prevents app crash on invalid querystring."
    },
    {
      "message": "Find the highest priority group"
    },
    {
      "message": " This is not an exhaustive list of options, more can be found: https://moment.github.io/luxon/#/math"
    },
    {
      "message": "@param timestampString The date we are adding the duration to, in timestamptz format (string).* @param toAdd The duration to be added to the date* @returns The resulting date in timestamptz format (string)."
    },
    {
      "message": "@param startDate The start date of the duration in timestamptz format (string).* @param endDate The end date of the duration in timestamptz format (string).* @returns a string containing the duration as number of months and days, e.g. \"13 months, 1 day\"."
    },
    {
      "message": "remove the wrapping span NumberFormat uses by default."
    },
    {
      "message": "Current date without time information"
    },
    {
      "message": "Current date without time information"
    },
    {
      "message": "@param timestampString The date we are subtracting the duration from, in timestamptz format (string).* @param toSubtract The duration to be subtracted from the date* @returns The resulting date in timestamptz format (string)."
    },
    {
      "message": "Effectively validating the form a second time to retrieve the errors"
    },
    {
      "message": "We walk through the structure to number everything with section numbers and form indices"
    },
    {
      "message": " Invalidate the entire store, to make sure that we don't display any stale data after redirecting to the next page. This could be optimized to only invalidate the affected records."
    },
    {
      "message": "A factory function that creates a page component for a form_change record.** It abstracts away the submit, discard and change behaviours from the* individual forms, as well as the relay form change query, session and layouts.** @param resourceTitle The title of the resource, for which the form is being created (e.g. \"Operator\")* @param onSubmitOrDiscardRoute The route to navigate to when the form is submitted or discarded* @param FormComponent The form component to render* @returns a tuple [FormPage, query] where FormPage is the page component to render, and query is the relay query.*          it is meant to be used in the withRelay HOC (e.g. withRelay(FormPage, query, withRelayOptions))."
    },
    {
      "message": "removed `getRelaySerializedState` in favor of new API: https://github.com/RevereCRE/relay-nextjs/releases/tag/v1.0.0"
    },
    {
      "message": " Max 100 requests Number in milliseconds, how long records stay valid in cache (default: 900000, 15 minutes). TODO: is one minute enough? How long should records stay valid?"
    },
    {
      "message": "Unset debouncedMutation to ensure it does not get called again with the next network request"
    },
    {
      "message": "Server-side redirection of the user to their landing route, if they are logged in"
    },
    {
      "message": "defining the class names if we are showing a revision specific diff"
    },
    {
      "message": "Ignore oneOf errors https://github.com/rjsf-team/react-jsonschema-form/issues/1263"
    },
    {
      "message": "substring is necessary here as the properties include a \".\" prefix. eg. the property for the email field is \".email\""
    },
    {
      "message": "The ObjectFieldTemplate is used by RJSF to render the \"Object\" type in a schema.* For really small forms, it can be useful to override the default tempalte with* an empty template that has only renders the individual form fields."
    },
    {
      "message": "ArrayFieldTemplate: AnticipatedFundingPerFiscalYearArrayFieldTemplate,"
    },
    {
      "message": "teimpReporting"
    },
    {
      "message": "uponCompletion"
    },
    {
      "message": " Filter out fields from the formSchema that have not changed from the previous revision so the summary ignores these fields This is mainly used when the form has multiple fields within it and we want to check each field data with the previous revision"
    },
    {
      "message": " Filter out fields from the formSchema that have not changed from the previous revision so the summary ignores these fields This is mainly used when the form has multiple fields within it and we want to check each field data with the previous revision"
    },
    {
      "message": "Receives a date and returns a string with the date in a human readable format"
    },
    {
      "message": "If we are using this widget to show numbers as money or percent, we can set `isMoney` or `isPercentage` to true in the uiSchema."
    },
    {
      "message": "If we need to set the amount of decimal places, we can set it in the uiSchema, otherwise there will be no decimal places."
    },
    {
      "message": "Hardcoded for now, we can change it if we need to"
    },
    {
      "message": "This ensures that a minimum of three fiscal years are displayed, even if the user hasn't filled out any milestone information yet"
    },
    {
      "message": "If we are using this widget to show numbers as money or percent, we can set `isMoney` or `isPercentage` to true in the uiSchema."
    },
    {
      "message": "If we need to set the amount of decimal places, we can set it in the uiSchema, otherwise there will be no decimal places."
    },
    {
      "message": "This is required since we render a <span> component"
    },
    {
      "message": "This color is somehow grey-ish to bypass accessibility issues"
    },
    {
      "message": "If we are using this widget to show numbers as money or percent, we can set `isMoney` or `isPercentage` to true in the uiSchema."
    },
    {
      "message": "If we need to set the amount of decimal places, we can set it in the uiSchema, otherwise there will be no decimal places."
    },
    {
      "message": "If we are using this widget to show numbers as money or percent, we can set `isMoney` or `isPercentage` to true in the uiSchema."
    },
    {
      "message": "If we need to set the amount of decimal places, we can set it in the uiSchema, otherwise there will be no decimal places."
    },
    {
      "message": "If we are using this widget to show numbers as money or percent, we can set `isMoney` or `isPercentage` to true in the uiSchema."
    },
    {
      "message": "If we need to set the amount of decimal places, we can set it in the uiSchema, otherwise there will be no decimal places."
    },
    {
      "message": "This hook creates an archive mutation by wrapping the relay `useMutationWithErrorMessage` hook and* setting the mutation variables with a `archivedAt` value.** @param relayNodeName the name of the relay node the mutation is applied to, e.g. \"projectRevision\", \"formChange\", ...* @param mutation the GraphQL 'update' mutation on the relay node* @returns a tuple with the archinf mutation and a boolean indicating if the mutation is in flight** example usage:** const mutation = graphql`*    mutation archiveMyEntityMutation($input: UpdateMyEntityInput!) {*     updateMyEntity(input: $input) {*      __typename*    }* }`;** const [archiveMyEntityMutation, isInFlight] = useArchiveMutation(\"myEntity\", mutation);"
    },
    {
      "message": " Debounced mutations should be commited immediately to perform the optimisticUpdate The actual request will be debounced in the network layer Here we either dispose of a debounced mutation, or remove it from the map when it errors/completes"
    },
    {
      "message": "Specific mutation for a form_change for a project.* Includes whether the suggested proposal reference is unique in the system."
    },
    {
      "message": "Specific mutation for a form_change for a funding agreement."
    },
    {
      "message": "Delete mutation for a form_change that was created in the same revision."
    },
    {
      "message": "Delete mutation for a form_change that was created in a previous revision & should be updated with operation = 'ARCHIVE'."
    },
    {
      "message": "Specific mutation for a form_change for a project.* Includes whether the suggested proposal reference is unique in the system."
    },
    {
      "message": "Growthbook - external-operators"
    },
    {
      "message": "we don't care about the actual base here, just want to parse the search params"
    },
    {
      "message": "Growthbook - amendments"
    },
    {
      "message": " Invalidate the entire store,to make sure that we don't display any stale data after redirecting to the next page. This could be optimized to only invalidate the affected records."
    },
    {
      "message": "Function: approve staged change, trigger an insert on the project*  table & redirect to the project page"
    },
    {
      "message": "Growthbook - amendments"
    },
    {
      "message": "Growthbook - amendments"
    },
    {
      "message": "filtering to show only the amendment statuses that are allowed to be selected based on the revision type"
    },
    {
      "message": "eslint-disable relay/must-colocate-fragment-spreads"
    },
    {
      "message": "Growthbook - external-operators"
    },
    {
      "message": "eslint-disable relay/graphql-naming"
    },
    {
      "message": "/// Metabase"
    },
    {
      "message": "/// Support email mailto:"
    },
    {
      "message": "/// Operators"
    },
    {
      "message": "/// Contact"
    },
    {
      "message": "Optional queries are used to create new contact and redirect the user to back to the project contact form"
    },
    {
      "message": "/// Project Revision"
    },
    {
      "message": "/// Project"
    },
    {
      "message": "// External User"
    },
    {
      "message": "Allow the server to send any in-flight requests before shutting down"
    },
    {
      "message": " graphql-upload exports the `.js` in the path: https://github.com/jaydenseric/graphql-upload/blob/aa15ee0eb2b3a4e2421d098393bbbf9252f1a8c7/package.json#L41 eslint-disable-next-line import/extensions"
    },
    {
      "message": " trust the first proxy, so that secure cookies are set, even though the request reaching the express container is not secure"
    },
    {
      "message": " If authentication is disabled use the user above to connect to the database Otherwise, use the PGUSER env variable"
    },
    {
      "message": "Database connection service that creates a pgPool connectionbased on database options in the environment variables of calling process."
    },
    {
      "message": "Takes a 'cookies' object (key-value pairs in an object)"
    },
    {
      "message": " if the ENABLE_MOCK_TIME or ENABLE_DB_MOCKS_COOKIES_ONLY env variable is set, creates the settings object needed for postgres to use the mocks schema by default and the fields to retrieve from the cookies"
    },
    {
      "message": "import from dist/helpers to prevent bundling all the @bcgov-cas/sso-express dependencies"
    },
    {
      "message": " When we will have other identity providers, we can check it the identity_provider claim return req.claims.identity_provider === \"idir\" ? [groupConstants.UNAUTHORIZED_IDIR_USER] : [groupConstants.NON_IDIR_USER];"
    },
    {
      "message": " Renders a static info page on unsupported browsers. Files in /public/ are excluded."
    },
    {
      "message": "This middleware calls the createUserFromSession mutation."
    },
    {
      "message": "Tell search + crawlers not to index non-production environments:"
    },
    {
      "message": "True if the host has been configured to use https"
    },
    {
      "message": "There is no need to pass a context to the resolver at this time"
    },
    {
      "message": "This is a list of schema names that live in the database and*  not as static json data in the code.*  The validation plugin will try to fetch them from the cif.form table*  instead of using the static json schema."
    },
    {
      "message": "There is no need to pass a context to the resolver at this time"
    },
    {
      "message": "If the mutation doesn't change the form data, we don't need to re-validate"
    },
    {
      "message": " This is the recommended way to fetch data ahead of running the resolver of the GraphQL mutation - see first \"IMPORTANT\" note here: https://www.graphile.org/postgraphile/make-extend-schema-plugin/#the-selectgraphqlresultfromtable-helper"
    },
    {
      "message": "Use consola for logging instead of default logger"
    },
    {
      "message": "You can add more to context if you like"
    },
    {
      "message": " Execute your GraphQL query in this function with the provided `context` object, which should NOT be used outside of this function."
    },
    {
      "message": "Save tile to remote storage system"
    },
    {
      "message": "Replace existing GraphQL type with `Upload` type"
    },
    {
      "message": "Extract the old resolver from `field`"
    },
    {
      "message": "eslint-disable-next-line @typescript-eslint/no-shadow"
    },
    {
      "message": "Copy over everything except 'resolve'"
    },
    {
      "message": "Recursively check for Upload promises to resolve"
    },
    {
      "message": "eslint-disable-next-line require-atomic-updates"
    },
    {
      "message": "Call the old resolver"
    },
    {
      "message": "Finally return the result."
    },
    {
      "message": " graphql-upload exports the `.js` in the path: https://github.com/jaydenseric/graphql-upload/blob/aa15ee0eb2b3a4e2421d098393bbbf9252f1a8c7/package.json#L45 eslint-disable-next-line import/extensions"
    },
    {
      "message": " It's possible that `resolve` isn't specified on a field, so in that case we fall back to a default resolver."
    },
    {
      "message": " Add our new resolver which wraps the old resolver eslint-disable-next-line @typescript-eslint/no-shadow"
    },
    {
      "message": "File copied from https://github.com/graphile-contrib/postgraphile-plugin-upload-field/blob/5aca056eacda9a9206323af49dd9528e607e20a7/src/UploadFieldPlugin.js* And updated to support the newer export style from graphql-upload"
    },
    {
      "message": "AJV needs to be made aware of any custom formats used in the schema"
    },
    {
      "message": " ajv caches compiled schemas on first instantiation, we don't need to precompile schemas in advance"
    },
    {
      "message": " This is fine since this is a react functional component eslint-disable-next-line react-hooks/rules-of-hooks"
    },
    {
      "message": "eslint-disable-next-line jest/no-standalone-expect"
    },
    {
      "message": "mocking the getConfig function to return a mocked config object to be used in `getSupportEmailMailTo` function"
    },
    {
      "message": "change the route and re-render, the mutation should be called again"
    },
    {
      "message": "rerender without changing the route, should not call the mutation again"
    },
    {
      "message": " TODO: use assertion when the project summary report is implemented expect(screen.getByText(/project summary report/i)).toBeVisible();"
    },
    {
      "message": " We're using a wrapper component to avoid rendering errors with <td> elements not being in a table."
    },
    {
      "message": "Reset the mocked system date"
    },
    {
      "message": "Once per form"
    },
    {
      "message": "First Node"
    },
    {
      "message": "updated due date"
    },
    {
      "message": "updated received date"
    },
    {
      "message": "Second Node"
    },
    {
      "message": "Third Node"
    },
    {
      "message": "Fourth Node"
    },
    {
      "message": "Clear button only appear one time"
    },
    {
      "message": "Remove buttons only appear on alternate contacts"
    },
    {
      "message": "Warning: Expected `optimisticResponse` to match structure of server response for mutation `updateFormChangeMutation`"
    },
    {
      "message": "Once per form"
    },
    {
      "message": "rank needs to be placed here because for any nested ProjectRevision type, the Relay testing environment uses this top-level ProjectRevision() generator"
    },
    {
      "message": "Also ensures that funding stream is read only"
    },
    {
      "message": "Additional Funding Source section"
    },
    {
      "message": "Expenses & Payments Tracker Section"
    },
    {
      "message": "Additional Funding Source section"
    },
    {
      "message": "Expenses & Payments Tracker Section"
    },
    {
      "message": "The Funding Parameters"
    },
    {
      "message": "The additional funding source"
    },
    {
      "message": " max funding changes max funding changes"
    },
    {
      "message": "The whole `formChange` object is null before a manager is selected, so the form change id (comes from `rowId`) is undefined. This test should be updated to mock data if the underlying architecture changes to return a non-null form_change object."
    },
    {
      "message": " Warning: Expected `optimisticResponse` to match structure of server response for mutation `addManagerToRevisionMutation`, Warning: RelayResponseNormalizer: Payload did not contain a value for field `id: id`. Check that you are parsing with the same query that was used to fetch the payload. RelayObservable: Unhandled Error Error: at /home/briannacerkiewicz/cas-cif/app/tests/unit/components/Form/ProjectManagerForm.test.tsx:220:50"
    },
    {
      "message": " Warning: Expected `optimisticResponse` to match structure of server response for mutation `updateFormChangeMutation`, Warning: RelayResponseNormalizer: Payload did not contain a value for field `operation: operation`. Check that you are parsing with the same query that was used to fetch the payload."
    },
    {
      "message": " Warning: Expected `optimisticResponse` to match structure of server response for mutation `deleteManagerFromRevisionWithArchiveMutation`, Warning: RelayResponseNormalizer: Payload did not contain a value for field `query: query`. Check that you are parsing with the same query that was used to fetch the payload."
    },
    {
      "message": "changed fields"
    },
    {
      "message": "Archive milestone report"
    },
    {
      "message": "description diff"
    },
    {
      "message": "milestone diff"
    },
    {
      "message": "report due date diff"
    },
    {
      "message": "select the overall status badge"
    },
    {
      "message": "Once per form"
    },
    {
      "message": "First Node"
    },
    {
      "message": "Second Node"
    },
    {
      "message": "Third Node"
    },
    {
      "message": "Fourth Node"
    },
    {
      "message": "only the changed field is visible"
    },
    {
      "message": "Disclaimer"
    },
    {
      "message": "Privacy"
    },
    {
      "message": "Accessibility"
    },
    {
      "message": "Copyright"
    },
    {
      "message": "Contact Us"
    },
    {
      "message": "Program Details"
    },
    {
      "message": "Disclaimer"
    },
    {
      "message": "Privacy"
    },
    {
      "message": "Accessibility"
    },
    {
      "message": "Copyright"
    },
    {
      "message": " I'm not testing the href because it is using a function and that function returns undefined during the test.(It's working perfectly on the rendered page though) tried to mock the function itself but it didn't work"
    },
    {
      "message": " We're using a wrapper component to avoid rendering errors with <td> elements not being in a table."
    },
    {
      "message": "testing some classnames that are used to style the diff"
    },
    {
      "message": " We're using a wrapper component to avoid rendering errors with <td> elements not being in a table."
    },
    {
      "message": "mocking the bcgov theme button because we need enable the button for testing"
    },
    {
      "message": "TODO: remove this when we have a mock of the mutation function"
    },
    {
      "message": "TODO: replace this with a mock of the mutation function"
    },
    {
      "message": "TODO: replace this with a mock of the mutation function"
    },
    {
      "message": "TODO: replace this with a mock of the mutation function"
    },
    {
      "message": "TODO: replace this with a mock of the mutation function"
    },
    {
      "message": "TODO: replace this with a mock of the mutation function"
    },
    {
      "message": "Reset the mocked system date"
    },
    {
      "message": "Group role grabs the fieldset"
    },
    {
      "message": "Effectively Jan 20th on Vancouver time (Jan 21st 1:10am EST)"
    },
    {
      "message": "Group role grabs the fieldset"
    },
    {
      "message": "Group role grabs the fieldset"
    },
    {
      "message": "Group role grabs the fieldset"
    },
    {
      "message": "Group role grabs the fieldset"
    },
    {
      "message": "eslint and the relay compiler are conflicting here."
    },
    {
      "message": "eslint-disable relay/graphql-naming"
    },
    {
      "message": "eslint-disable-next-line @typescript-eslint/no-unused-vars"
    },
    {
      "message": "eslint-disable-next-line @typescript-eslint/no-unused-vars"
    },
    {
      "message": "The main functionality is already tested in the useDiscardFormChange test (which is a better integration test)."
    },
    {
      "message": "A mock function to allow us to test which mutation is processed"
    },
    {
      "message": "A mock function to allow us to test which mutation is processed"
    },
    {
      "message": "No debounceKey here"
    },
    {
      "message": "A mock function to allow us to test which mutation is processed"
    },
    {
      "message": "A mock function to allow us to test which mutation is processed"
    },
    {
      "message": "This is not a mutation"
    },
    {
      "message": " `commitInRender` never changes in the test eslint-disable-next-line react-hooks/rules-of-hooks"
    },
    {
      "message": "This test setup is based on the test of the useMutation hook in* the react-relay library."
    },
    {
      "message": "@jest-environment node"
    },
    {
      "message": "the date is formatted using locale and it can show up slightly differently in different browsers (e.g., sometimes there's a period after the month abbreviation, sometimes there's not)"
    },
    {
      "message": "This is a required prop but not required for the test"
    },
    {
      "message": "This is a required prop but not required for the test"
    },
    {
      "message": "@jest-environment node"
    },
    {
      "message": "@jest-environment node"
    },
    {
      "message": "5 rows: 1 header, 1 filter, 1 for the pagination, and 2 for the attachments"
    },
    {
      "message": "eslint-disable-next-line jest/expect-expect"
    },
    {
      "message": "4 rows: 1 header, 1 filter, 1 for the pagination, and 1 for the amendment and revision"
    },
    {
      "message": "If the form is the project manager form, return the project manager schema"
    },
    {
      "message": "If the form is the project contact form, return the project contact schema"
    },
    {
      "message": "Handle default case"
    },
    {
      "message": "We need a non-null amount of form changes"
    },
    {
      "message": "https://relay.dev/docs/next/guides/testing-relay-with-preloaded-queries/#configure-the-query-resolver-to-generate-the-response* To find the key of the generated operation, one can call* `console.log(JSON.stringify(operation, null, 2))`* just before returning the MockPayloadGenerator and looking for concreteType instances"
    },
    {
      "message": "https://relay.dev/docs/next/guides/testing-relay-with-preloaded-queries/#configure-the-query-resolver-to-generate-the-response* To find the key of the generated operation, one can call* `console.log(JSON.stringify(operation, null, 2))`* just before returning the MockPayloadGenerator and looking for concreteType instances"
    },
    {
      "message": "1. The response has the right headers set"
    },
    {
      "message": "2. The storage client's file's pipe method has been called with the response object"
    },
    {
      "message": "@jest-environment node"
    },
    {
      "message": "@jest-environment node"
    },
    {
      "message": "testing this in the next test"
    },
    {
      "message": "this validates it is the project schema"
    },
    {
      "message": "testing this in the next test"
    },
    {
      "message": "testing this in the next test"
    },
    {
      "message": "Once to fetch the schema name"
    },
    {
      "message": "Once to fetch the schema from the database"
    },
    {
      "message": "testing this in the next test"
    },
    {
      "message": "Enable all growthbook feature flags in jest by defaultotherwise, all tests with 'off' feature flags will fail"
    },
    {
      "message": "-*- coding: utf-8 -*-"
    },
    {
      "message": " # DAG triggering cron jobs to setup the cif database                       # #"
    },
    {
      "message": " # DAG to test database backup integrity                                       # #"
    },
    {
      "message": " # DAG to insert timestamp for backup testing                                  # #"
    },
    {
      "message": "############################################################################### #                                                                             # # DAG triggering cron jobs to setup the cif database                       # #                                                                             # ###############################################################################"
    },
    {
      "message": "############################################################################### #                                                                             # # DAG to test database backup integrity                                       # #                                                                             # ###############################################################################"
    },
    {
      "message": "############################################################################### #                                                                             # # DAG to insert timestamp for backup testing                                  # #                                                                             # ###############################################################################"
    },
    {
      "message": "In case of a parsing error or anything else, we return the regular now() behaviour"
    },
    {
      "message": " Deploy mocks:mock_now_method to pg requires: schema_mocks"
    },
    {
      "message": " look at the database options if there is a value set if it's not set the current_setting method returns nil and we return now()"
    },
    {
      "message": "Converting timestamptz to unix epoch"
    },
    {
      "message": " Deploy mocks:set_mocked_time_in_transaction to pg requires: mock_now_method"
    },
    {
      "message": "Deploy mocks:schemas/main to pg"
    },
    {
      "message": "Revert mocks:mock_now_method from pg"
    },
    {
      "message": "Revert mocks:set_mocked_time_in_transaction from pg"
    },
    {
      "message": "Revert mocks:schema_mocks from pg"
    },
    {
      "message": "3) we verify that if we set the mocks.mocked_timestamp value to null? or removed? or invalid? we default to now()"
    },
    {
      "message": "4) We verify that fractional epochs are supported"
    },
    {
      "message": " writing this test on Oct 28th, 2020 1) we verify that now() works"
    },
    {
      "message": " 2) we verify that, if we set the 'mocks.mocked_timestamp' value, now() defaults to that 925920000 is May 5th 1999 at 9am, as Unix Epoch, west coast time"
    },
    {
      "message": " the method should take care of the search path for the transaction no need to specify which `mocks()` we call"
    },
    {
      "message": " writing this test on Dec 7, 2020 1) we verify that now() works"
    },
    {
      "message": " 2) we verify that, if we call set_mocked_time_in_transaction, time travel is properly enabled 925920000 is May 5th 1999 at 9am, as Unix Epoch, west coast time"
    },
    {
      "message": "Verify mocks:mock_now_method on pg"
    },
    {
      "message": "Verify mocks:set_mocked_time_in_transaction on pg"
    },
    {
      "message": "Verify mocks:schema_mocks on pg"
    },
    {
      "message": "This is required as we now only allow user subs to be updated once."
    },
    {
      "message": "Commit records"
    },
    {
      "message": "ep projects"
    },
    {
      "message": "ia projects"
    },
    {
      "message": "external testing operator projects"
    },
    {
      "message": "insert milestone reports including payments"
    },
    {
      "message": "reporting requirement"
    },
    {
      "message": "insert annual reports for EP projects"
    },
    {
      "message": "insert quarterly reports for EP projects"
    },
    {
      "message": "insert project summary reports for IA projects"
    },
    {
      "message": "ep funding parameters"
    },
    {
      "message": "ia funding parameters"
    },
    {
      "message": "first Amendment type project revision"
    },
    {
      "message": "first General Revision type project revision"
    },
    {
      "message": "first Minor Revision type project revision"
    },
    {
      "message": "second Amendment type project revision"
    },
    {
      "message": "cif.cif_user should not be truncated or else all tables should be (since they all have a created_by column)"
    },
    {
      "message": "Deploy cif:create_roles to pg"
    },
    {
      "message": "The create roles affects the database globally. Cannot drop the roles once created."
    },
    {
      "message": " Deploy cif:computed_columns/full_name to pg requires: tables/cif_user"
    },
    {
      "message": " Deploy cif:computed_columns/full_name to pg requires: tables/cif_user"
    },
    {
      "message": "Deploy cif:computed_columns/contact_full_name to pg"
    },
    {
      "message": "Deploy cif:computed_columns/contact_full_name to pg"
    },
    {
      "message": "Deploy cif:computed_columns/contact_full_phone to pg"
    },
    {
      "message": "Deploy cif:computed_columns/contact_pending_form_change to pg"
    },
    {
      "message": "Deploy cif:computed_columns/contact_pending_form_change_001_drop_before_cif_user_update to pg"
    },
    {
      "message": " Deploy cif:computed_columns/contact_pending_form_change_002_create_after_cif_user_update to pg requires: computed_columns/contact_pending_form_change_001_drop_before_cif_user_update"
    },
    {
      "message": " Deploy cif:emission_intensity_report_calculated_ei_performance to pg requires: tables/emission_intensity_report"
    },
    {
      "message": " Deploy cif:emission_intensity_report_calculated_ei_performance to pg requires: tables/emission_intensity_report"
    },
    {
      "message": " Deploy cif:emission_intensity_report_calculated_ei_performance to pg requires: tables/emission_intensity_report"
    },
    {
      "message": "Deploy cif:computed_columns/form_change_as_emission_intensity_report to pg"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned emission_intensity_report record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": "Deploy cif:computed_columns/form_change_as_emission_intensity_report to pg"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned emission_intensity_report record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project to pg requires: tables/project requires: tables/project_001 requires: tables/form_change"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project to pg requires: tables/project requires: tables/project_001 requires: tables/form_change"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project to pg requires: tables/project requires: tables/project_001 requires: tables/form_change"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project_contact to pg requires: tables/project requires: tables/contact requires: tables/form_change"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project_manager to pg requires: tables/form_change requires: tables/project_manager"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_manager record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_manager record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_reporting_requirement to pg requires: tables/form_change requires: tables/reporting_requirement"
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": "Deploy cif:computed_columns/form_change_calculated_ei_performance to pg"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_calculated_gross_amount_this_milestone to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_calculated_holdback_amount_this_milestone to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_calculated_net_amount_this_milestone to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:computed_columns/form_change_calculated_total_payment_amount_to_date from pg"
    },
    {
      "message": "TODO: placeholder"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_eligible_expenses_to_date to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_gross_payments_to_date to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_holdback_amount_to_date to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:form_change_is_pristine to pg"
    },
    {
      "message": "Deploy cif:computed_columns/form_change_is_unique_value to pg"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_net_payments_to_date to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:functions/form_change_parent_form_change_from_revision to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:functions/form_change_payment_percentage to pg requires: tables/form_change requires: computed_columns/emission_intensity_report_calculated_ei_performance 100 â€“ ((-1.5) x GHG Emission Intensity Performance + 145), values capped at 0 and 100"
    },
    {
      "message": " We need a case here becase greatest() and least() will ignore null values, while we care about returning null if both values are null."
    },
    {
      "message": " Deploy cif:functions/form_change_payment_percentage to pg requires: tables/form_change requires: computed_columns/emission_intensity_report_calculated_ei_performance 100 â€“ ((-1.5) x GHG Emission Intensity Performance + 145)"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_reporting_requirement_status to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:computed_columns/operator_pending_form_change to pg"
    },
    {
      "message": " Deploy cif:computed_columns/operator_pending_form_change_001_drop_before_cif_user_update to pg requires: computed_columns/operator_pending_form_change"
    },
    {
      "message": " Deploy cif:computed_columns/operator_pending_form_change_002_create_after_cif_user_update to pg requires: computed_columns/operator_pending_form_change_001_drop_before_cif_user_update"
    },
    {
      "message": " Deploy cif:computed_columns/project_latest_committed_project_revision to pg requires: tables/project requires: tables/project_revision"
    },
    {
      "message": "Deploy cif:computed_columns/project_next_milestone_due_date to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_pending_project_revision to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_primary_managers to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_anticipated_funding_amount_per_fiscal_year to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_effective_date to pg"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_form_changes_for to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_gross_payment_amount to pg"
    },
    {
      "message": "Get individual milestone statuses"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_milestone_report_statuses to pg requires: tables/form_change"
    },
    {
      "message": "Get individual milestone statuses"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_milestone_report_statuses to pg requires: tables/form_change"
    },
    {
      "message": "Get individual milestone statuses"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_milestone_report_statuses to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_net_payment_amount to pg"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_project_form_change to pg requires: tables/project_revision"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_project_manager_form_changes_by_label to pg requires: tables/form_change requires: tables/project_manager"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_project_manager_form_changes_by_label to pg requires: tables/form_change requires: tables/project_manager"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_rank to pg"
    },
    {
      "message": "As soon as there's a committed record for this project we want to exclude that record's score from the ranking calculation because it isn't as up-to-date as the new_form_data"
    },
    {
      "message": "If we have only another status that is not 'Not Started' and that status is 'Filled' then we are complete"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_tasklist_status_for to pg requires: util_functions/get_form_status"
    },
    {
      "message": "If we have only another status that is not 'Not Started' and that status is 'Filled' then we are complete"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_tasklist_status_for to pg requires: util_functions/get_form_status"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_teimp_payment_amount to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_teimp_payment_percentage to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_teimp_payment_percentage to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_total_project_value to pg"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_type_row_number to pg requires: tables/project requires: tables/project_revision"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change to pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change to pg"
    },
    {
      "message": " Deploy cif:computed_columns/reporting_requirement_has_expenses to pg requires: tables/report_type requires: tables/reporting_requirement"
    },
    {
      "message": "Deploy cif:data/002_insert_json_schema_form_data_remove_default_from_annual_report_schema to pg"
    },
    {
      "message": "reporting_requirement (quarterly / annual report)"
    },
    {
      "message": "Deploy cif:data/005_insert_json_schema_form_data_remove_undefined_from_project_contact_schema to pg"
    },
    {
      "message": "project_contact"
    },
    {
      "message": "Deploy cif:data/006_json_schema_project_manager_form_remove_default to pg"
    },
    {
      "message": "Migration Inserts all json-schema form data into cif.form"
    },
    {
      "message": "project"
    },
    {
      "message": "project_contact"
    },
    {
      "message": "project_manager"
    },
    {
      "message": "reporting_requirement (quarterly / annual report)"
    },
    {
      "message": "contact"
    },
    {
      "message": "operator"
    },
    {
      "message": "milestone"
    },
    {
      "message": "funding_agreement"
    },
    {
      "message": "emission_intensity_report"
    },
    {
      "message": "add a form_change_commit_handler once they are created for the below records"
    },
    {
      "message": "additional_funding_source and funding_parameter to be removed when funding agreement form gets refactored to be one form change, just here to pass the fkey"
    },
    {
      "message": " Deploy cif:migrations/insert_json_schema_form_data to pg requires: functions/handle_milestone_form_change_commit requires: tables/form"
    },
    {
      "message": "Deploy cif:data/insert_json_schema_form_data_project_summary to pg"
    },
    {
      "message": "- project_summary_report"
    },
    {
      "message": "Deploy cif:data/insert_json_schema_form_data_separate_EP_and_IA_funding_schemas to pg"
    },
    {
      "message": "funding_parameter_IA and funding_parameter_EP to be removed when funding agreement form gets refactored to be one form change, just here to pass the fkey"
    },
    {
      "message": "Deploy cif:data/insert_json_schema_form_data_update_milestone_form_field_titles to pg"
    },
    {
      "message": "Deploy cif:data/insert_json_schema_form_dependency_update_milestone_form_total_eligible_expenses to pg"
    },
    {
      "message": "Deploy cif:functions/funding_form_changes_to_separate_schemas to pg"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "it is necessary to put the values in a row(...) in case there is only one value;"
    },
    {
      "message": " Deploy cif:functions/handle_default_form_change_commit to pg requires: tables/form_change"
    },
    {
      "message": "Prune the form_data object of any deprecated columns.If a column is deprecated, but the key still exists in older form data recordsit will cause an error when trying to insert data into that column."
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "it is necessary to put the values in a row(...) in case there is only one value;"
    },
    {
      "message": " Deploy cif:functions/handle_default_form_change_commit to pg requires: tables/form_change"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "can be null if creating with empty form data...problem?"
    },
    {
      "message": " Deploy cif:functions/handle_milestone_form_change_commit to pg requires: tables/form_change"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": " Deploy cif:functions/handle_project_summary_report_form_change_commit to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:functions/migration_milestone_form_changes_to_single_form_change to pg"
    },
    {
      "message": "reporting requirement data"
    },
    {
      "message": "has_expenses comes from the report type table"
    },
    {
      "message": "milestone report data"
    },
    {
      "message": " payment data we aren't tracking calculated amounts yet, the migration function doesn't need to take care of them."
    },
    {
      "message": "Deploy cif:functions/pending_new_form_change_for_table to pg"
    },
    {
      "message": " Deploy cif:functions/pending_new_form_change_for_table_001_drop_before_cif_user_update to pg requires: functions/pending_new_form_change_for_table"
    },
    {
      "message": " Deploy cif:functions/pending_new_form_change_for_table_002_create_after_cif_user_update to pg requires: functions/pending_new_form_change_for_table_001_drop_before_cif_user_update"
    },
    {
      "message": "Deploy cif:functions/pending_new_project_revision to pg"
    },
    {
      "message": " Deploy cif:functions/pending_new_project_revision_001_drop_before_cif_user_update to pg requires: functions/pending_new_project_revision"
    },
    {
      "message": " Deploy cif:functions/pending_new_project_revision_002_create_after_cif_user_update to pg requires: functions/pending_new_project_revision_001_drop_before_cif_user_update"
    },
    {
      "message": "ensure null, empty, and whitespace _sub / idir_userid claims are filtered out"
    },
    {
      "message": "unique identifier can never be null"
    },
    {
      "message": " Deploy cif:function_session to pg requires: schemas/main requires: types/keycloak_jwt"
    },
    {
      "message": " Deploy cif:functions/session_001_drop_function_before_table_update to pg requires: functions/session"
    },
    {
      "message": "ensure null, empty, and whitespace _sub claim is filtered out"
    },
    {
      "message": "unique identifier can never be null"
    },
    {
      "message": " Deploy cif:functions/session_002_create_function_after_table_update to pg requires: functions/session_001_drop_function_before_table_update"
    },
    {
      "message": "Deploy cif:migrations/001_milestone_form_changes_to_single_form_change to pg"
    },
    {
      "message": "Deploy cif:migrations/002_separate_funding_schemas_for_EP_and_IA to pg"
    },
    {
      "message": "Deploy cif:mutations/add_additional_funding_source_to_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/add_contact_to_revision to pg"
    },
    {
      "message": "We need the to pass the contact_id conditionally, because json format doesn't support null values"
    },
    {
      "message": " Deploy cif:mutations/add_emission_intensity_report_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": "Adding a emission intensity report to a project_revision is a chained operation. The data for emission is spread across two tables:- reporting_requirement (base table, common to all reports)- emission_intensity_report (data specific to emission intensity reports)Because this data is spread across two tables we have to create two form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/add_emission_intensity_report_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": "Adding a emission intensity report to a project_revision is a chained operation. The data for emission is spread across two tables:- reporting_requirement (base table, common to all reports)- emission_intensity_report (data specific to emission intensity reports)Because this data is spread across two tables we have to create two form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/add_milestone_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": " Deploy cif:mutations/add_milestone_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": "Adding a milestone to a project_revision is a chained operation. The data for milestones is spread across three tables:- reporting_requirement (base table, common to all reports)- milestone_report (data specific to milestone reports)- payment (payment data, common to some reports)Because this data is spread across three tables we have to create three form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/commit_form_change to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:mutations/commit_form_change to pg"
    },
    {
      "message": "TODO : add a conditional behaviour based on fc.form_id"
    },
    {
      "message": "Deploy cif:mutations/commit_form_change to pg"
    },
    {
      "message": "TODO : add a conditional behaviour based on fc.form_id"
    },
    {
      "message": "Deploy cif:mutations/commit_project_revision to pg"
    },
    {
      "message": "defer FK constraints check to the end of the transaction"
    },
    {
      "message": " Propagate the change_status to all related form_change records Save the project table first to avoid foreign key violations from other potential tables."
    },
    {
      "message": "Deploy cif:mutations/commit_project_revision to pg"
    },
    {
      "message": "defer FK constraints check to the end of the transaction"
    },
    {
      "message": " Propagate the change_status to all related form_change records Save the project table first do avoid foreign key violations from other potential tables."
    },
    {
      "message": "Deploy cif:mutations/create_form_change to pg"
    },
    {
      "message": "project_id is null until the project is created"
    },
    {
      "message": " Deploy cif:mutations/create_project to pg requires: tables/project"
    },
    {
      "message": "project_id is null until the project is created"
    },
    {
      "message": " Deploy cif:mutations/create_project to pg requires: tables/project"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "Deploy ggircs-app:mutations/create_user_from_session to pg"
    },
    {
      "message": " Deploy cif:mutations/create_user_from_session_001_drop_before_cif_user_update to pg requires: mutations/create_user_from_session"
    },
    {
      "message": "Deploy cif:mutations/delete_project_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/delete_project_revision to pg"
    },
    {
      "message": " Deploy cif:mutations/discard_additional_funding_source_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": " Deploy cif:mutations/discard_emission_intensity_report to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a emission intensity report is a chained operation. The data for emissions intensity is spread across two tables:- reporting_requirement (base table, common to all reports)- discard_emission_intensity_report (data specific to milestone reports)Because this data is spread across two tables we have to remove or archive two form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/discard_funding_parameter_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a funding_parameter is a chained operation. The data for funding_parameter is spread across two tables:- reporting_requirement (base table, common to all reports)- funding_parameter (data specific to parameter_form)Because this data is spread across two tables we have to remove or archive two form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/discard_funding_parameter_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a funding_parameter is a chained operation. The data for funding_parameter is spread across two tables:- reporting_requirement (base table, common to all reports)- funding_parameter (data specific to parameter_form)Because this data is spread across two tables we have to remove or archive two form_change records within one transaction, one for each table."
    },
    {
      "message": " Deploy cif:mutations/discard_milestone_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": " Deploy cif:mutations/discard_milestone_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a milestone is a chained operation. The data for milestones is spread across three tables:- reporting_requirement (base table, common to all reports)- milestone_report (data specific to milestone reports)- payment (payment data, common to some reports)Because this data is spread across three tables we have to remove or archive three form_change records within one transaction, one for each table."
    },
    {
      "message": "Deploy cif:mutations/generate_annual_reports to pg"
    },
    {
      "message": "setting the start_date to the end of the day to make sure we have the correct date on the front end (the front end is using the end of the day to display the date)"
    },
    {
      "message": "Deploy cif:mutations/generate_quarterly_reports to pg"
    },
    {
      "message": "choosing the closest quarter start date from a list of possible dates as a temporary table"
    },
    {
      "message": "setting the `report_interval_start_date` to the end of the day to make sure we have the correct date on the front end (the front end is using the end of the day to display the date)"
    },
    {
      "message": "Deploy cif:mutations/generate_reports to pg"
    },
    {
      "message": "Deploy cif:mutations/generate_reports to pg"
    },
    {
      "message": "if start date is before or equal to jan 31st, we will start the first annual report on the same year otherwise we will start on the next year"
    },
    {
      "message": "choosing the closest quarter start date from a list of possible dates as a temporary table"
    },
    {
      "message": "generating the reports"
    },
    {
      "message": "Deploy cif:mutations/stage_dirty_form_changes to pg"
    },
    {
      "message": "Deploy cif:mutations/stage_form_change to pg"
    },
    {
      "message": "Deploy cif:mutations/undo_form_changes to pg"
    },
    {
      "message": "Since project revision is the same for all form changes, we can just use the first one"
    },
    {
      "message": "we need to treat project overview table differently as it needs a null object as form data"
    },
    {
      "message": "Deploy cif:mutations/undo_form_changes to pg"
    },
    {
      "message": "Since project revision is the same for all form changes, we can just use the first one"
    },
    {
      "message": "we need to treat project overview table differently as it needs a null object as form data"
    },
    {
      "message": "Deploy cif:mutations/undo_form_changes to pg"
    },
    {
      "message": "Since project revision is the same for all form changes, we can just use the first one"
    },
    {
      "message": "we need to treat project overview table differently as it needs a null object as form data"
    },
    {
      "message": "Deploy cif:mutations/update_form_change to pg"
    },
    {
      "message": "Deploy cif:mutations/update_milestone_form_change to pg"
    },
    {
      "message": "remove the totalEligibleExpenses field if the reportType is not General Milestone"
    },
    {
      "message": "Deploy cif:mutations/update_milestone_form_change to pg"
    },
    {
      "message": "Deploy cif:mutations/update_or_create_user_from_session to pg"
    },
    {
      "message": " This function replaces the old cif.create_user_from_session and updates users based on email (unique in the IDIR realm) instead"
    },
    {
      "message": "Deploy cif:mutations/update_or_create_user_from_session to pg"
    },
    {
      "message": " This function replaces the old cif.create_user_from_session and updates users based on email (unique in the IDIR realm) instead"
    },
    {
      "message": "Deploy cif:schema/cif to pg"
    },
    {
      "message": "Deploy cif:schema/cif_private to pg"
    },
    {
      "message": "Deploy cif:tables/additional_funding_source to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/additional_funding_source_status to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/amendment_status to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/amendment_type to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/attachment to pg requires: tables/project_status requires: tables/project"
    },
    {
      "message": "Deploy cif:tables/change_status to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/cif_user to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_external permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": "Grant cif_guest permissions"
    },
    {
      "message": "Enable row-level security"
    },
    {
      "message": "cif_admin RLS"
    },
    {
      "message": "cif_internal RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_external RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_guest RLS: can only see its own (empty) record"
    },
    {
      "message": " Deploy cif:tables/cif_user_001_drop_policies to pg requires: tables/cif_user"
    },
    {
      "message": " Deploy cif:tables/cif_user_002_uuid_to_session_sub to pg requires: tables/cif_user_001_drop_policies requires: tables/cif_user"
    },
    {
      "message": "cif_internal RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_external RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_guest RLS: can only see its own (empty) record"
    },
    {
      "message": " Deploy cif:tables/cif_user_003_create_policies to pg requires: tables/cif_user"
    },
    {
      "message": "Allowing all the existing users to update the sub once."
    },
    {
      "message": " Deploy cif:tables/cif_user_004_allow_sub_update_flag to pg requires: tables/cif_user_003_create_policies"
    },
    {
      "message": " Deploy cif:tables/connect_session to pg requires: schemas/private"
    },
    {
      "message": "Deploy cif:tables/contact to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/emission_intensity_payment_percent to pg requires: schemas/main"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/emission_intensity_report to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/emission_intensity_report to pg requires: tables/reporting_requirement"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": " Deploy cif:tables/emission_intensity_report_001 to pg requires: tables/emission_intensity_report"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/form to pg requires: schemas/main"
    },
    {
      "message": "note: there is no need to migrate the existing data in the columns, since our prod data deployment step overwrites it every time."
    },
    {
      "message": " Deploy cif:tables/form to pg requires: schemas/main"
    },
    {
      "message": "Deploy cif:tables/audit to pg"
    },
    {
      "message": "We want the immutable trigger to run first to avoid doing unnecessary work"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": " Deploy cif:tables/form_change_001 to pg requires: tables/form_change requires: tables/form"
    },
    {
      "message": " Deploy cif:tables/full_backup_log to pg requires: schemas/private"
    },
    {
      "message": "Deploy cif:tables/funding_parameter to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/funding_parameter_001 to pg"
    },
    {
      "message": " Deploy cif:tables/funding_parameter_002_add_auto_generating_report_date_columns to pg requires: tables/funding_parameter"
    },
    {
      "message": " Deploy cif:tables/funding_parameter_003_drop_total_project_value_column to pg requires: tables/funding_parameter"
    },
    {
      "message": "Deploy cif:tables/funding_stream to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": " Order is important for funding_stream. EP needs id = 1 and IA needs id = 2 because it's how the business area refers to them and is used to generate unique ids"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": "EP and IA statuses"
    },
    {
      "message": "EP Only statuses"
    },
    {
      "message": "IA Only statuses"
    },
    {
      "message": " Deploy cif:tables/funding_stream_project_status to pg requires: tables/project_status requires: tables/funding_stream"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": "2018 to 2022 is the MVP year range"
    },
    {
      "message": " Deploy cif:tables/funding_stream_rfp to pg requires: tables/funding_stream"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": "Insert all possible combinations of funding_stream_rfp to project_status"
    },
    {
      "message": " Deploy cif:tables/funding_stream_rfp_project_status to pg requires: tables/funding_stream_rfp requires: tables/project_status"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": " Deploy cif:tables/funding_stream_rfp_project_status_001_drop_table to pg requires: tables/funding_stream_rfp_project_status"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/milestone_report to pg requires: tables/reporting_requirement"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/operator to pg requires: schemas/main"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/payment to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": " Deploy cif:tables/payment_001 to pg requires: tables/payment"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/project to pg requires: tables/funding_stream requires: tables/funding_stream_rfp requires: tables/project_status requires: tables/operator"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/project_001 to pg"
    },
    {
      "message": "Deploy cif:tables/project_002_add_contract_number to pg"
    },
    {
      "message": "Deploy cif:tables/project_003_add_immutable_funding_stream_trigger to pg"
    },
    {
      "message": "Deploy cif:tables/project_contact to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/project_manager to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/project_manager_label to pg requires: schemas/main"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/project_revision to pg"
    },
    {
      "message": "We want the immutable trigger to run first to avoid doing unnecessary work"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/project_revision_001_add_amendment_columns to pg"
    },
    {
      "message": "Deploy cif:tables/project_revision_amendment_type_001_add_delete_permissions to pg"
    },
    {
      "message": "Deploy cif:tables/project_revision_003_set_amendment_statuses to pg"
    },
    {
      "message": "Deploy cif:tables/project_revision_004_add_pending_actions_from to pg"
    },
    {
      "message": " Deploy cif:tables/project_revision_005_correct_revision_type to pg requires: tables/project_revision_004_add_pending_actions_from"
    },
    {
      "message": "The create_project_revision() function was defaulting new revisions to Amendment before we had implemented the abilityto create Amendment revisions. The revisions currently in the system should be of type 'General Revision'"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/project_revision_amendment_type to pg requires: tables/project_revision requires: tables/amendment_type"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/project_status to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Add new project status values"
    },
    {
      "message": "Rename project status values"
    },
    {
      "message": "delete redundant status values"
    },
    {
      "message": " Deploy cif:tables/project_status_001_update_harcoded_values to pg requires: tables/project_status"
    },
    {
      "message": "Deploy cif:tables/project_type to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/reporting_requirement to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/report_type to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:tables/report_type to pg"
    },
    {
      "message": " Deploy cif:tables/report_type_002 to pg requires: tables/report_type_001"
    },
    {
      "message": " Deploy cif:tables/report_type_003 to pg requires: tables/report_type_002"
    },
    {
      "message": " Deploy cif:tables/revision_status to pg requires: tables/amendment_status"
    },
    {
      "message": "Deploy cif:tables/revision_type to pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": " Deploy cif:tables/sector to pg requires: schemas/main"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Deploy cif:trigger_functions/archived_records_are_immutable to pg"
    },
    {
      "message": "Deploy cif:trigger_functions/cif_user_session_sub_immutable_with_flag to pg"
    },
    {
      "message": "Deploy cif:trigger_functions/committed_changes_are_immutable to pg"
    },
    {
      "message": " Deploy cif:trigger_functions/commit_form_changes to pg requires: schemas/private"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "If the form has errors set, we don't commit the change and abort the transaction."
    },
    {
      "message": "it is necessary to put the values in a row(...) in case there is only one value;"
    },
    {
      "message": " Deploy cif:trigger_functions/commit_form_changes to pg requires: schemas/private"
    },
    {
      "message": "Deploy cif:trigger_functions/commit_project_revision to pg"
    },
    {
      "message": "Deploy cif:trigger_functions/commit_project_revision to pg"
    },
    {
      "message": "If a project_id wasn't created, save it after the form_change row was committed"
    },
    {
      "message": " Propagate the change_status to all related form_change records Save the project table first do avoid foreign key violations from other potential tables."
    },
    {
      "message": "Deploy cif:trigger_functions/funding_stream_is_immutable to pg"
    },
    {
      "message": "Deploy cif:trigger_functions/operator_swrs_organisation_is_immutable to pg"
    },
    {
      "message": " Deploy cif:trigger_functions/set_previous_form_change_id to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:trigger_functions/set_user_id to pg requires: functions/session requires: table/cif_user"
    },
    {
      "message": " Deploy cif:trigger_functions/set_user_id_001_drop_before_cif_user_update to pg requires: trigger_functions/set_user_id"
    },
    {
      "message": " Deploy cif:trigger_functions/set_user_id_002_create_after_cif_user_update to pg requires: trigger_functions/set_user_id_001_drop_before_cif_user_update"
    },
    {
      "message": " Deploy cif:trigger_functions/update_timestamps to pg requires: schemas/private"
    },
    {
      "message": " Deploy cif:trigger_functions/update_timestamps_001_uuid_to_session_sub to pg requires: trigger_functions/update_timestamps"
    },
    {
      "message": "Deploy cif:types/form_change_operation to pg"
    },
    {
      "message": "Recreating the type with the `sub` field as text"
    },
    {
      "message": " Deploy cif:types/keycloak_jwt to pg requires: schemas/main"
    },
    {
      "message": " Deploy cif:types/keycloak_jwt to pg requires: schemas/main"
    },
    {
      "message": " Deploy cif:types/manager_form_changes_by_label_composite_return to pg requires: schemas/main"
    },
    {
      "message": "Deploy cif:types/milestone_report_status_return to pg"
    },
    {
      "message": "Deploy cif:types/sum_by_fiscal_year to pg"
    },
    {
      "message": "Deploy cif:util_functions/camel_to_snake_case to pg"
    },
    {
      "message": "Deploy cif:util_functions/get_fiscal_year_from_timestamp to pg"
    },
    {
      "message": "return not started for empty project form"
    },
    {
      "message": " Deploy cif:util_functions/get_form_status to pg requires: tables/form_change"
    },
    {
      "message": " Deploy cif:util_functions/get_form_status to pg requires: tables/form_change"
    },
    {
      "message": "Deploy cif:util_functions/get_form_status_001 to pg"
    },
    {
      "message": "return not started for empty project form"
    },
    {
      "message": "Deploy cif:util_functions/get_form_status_001 to pg"
    },
    {
      "message": "return not started for empty project form"
    },
    {
      "message": "Deploy cif:util_functions/grant_permissions to pg"
    },
    {
      "message": "Grants permission for all columns in a table"
    },
    {
      "message": "Grants permissions on specific columns in a table"
    },
    {
      "message": "Creates a foreign table and imports the operators from the ggircs database into the operator table in the cif database."
    },
    {
      "message": "Create fdw server"
    },
    {
      "message": "Create fdw user mapping"
    },
    {
      "message": "Create operator foreign table"
    },
    {
      "message": "Create report foreign table"
    },
    {
      "message": " Deploy cif:util_functions/import_swrs_operators to pg requires: tables/operator requires: schemas/private"
    },
    {
      "message": "Deploy cif:util_functions/import_swrs_operators_from_fdw to pg"
    },
    {
      "message": "Upsert the latest organisation data into the cif.operator table if the data has not been changed by a cif user"
    },
    {
      "message": " This functions queries the SWRS tables and commits form_change records to the cif database. It is meant to be used in conjunction to a foreign data wrapper to the SWRS database's operator and report tables."
    },
    {
      "message": " Pick the report from the latest reporting year that was inserted last This applies if there are multiple facilities per organisation The organisation data is expected to be the same for both facilities."
    },
    {
      "message": " if cif_operator is null (new operator) or cif_operator exists and the swrs and cif names are identical (no manual update from the frontend), then we update the cif name."
    },
    {
      "message": "Deploy cif:util_functions/import_swrs_operators_from_fdw to pg"
    },
    {
      "message": "Upsert the latest organisation data into the cif.operator table if the data has not been changed by a cif user"
    },
    {
      "message": " This functions queries the SWRS tables and commits form_change records to the cif database. It is meant to be used in conjunction to a foreign data wrapper to the SWRS database's operator and report tables."
    },
    {
      "message": " Pick the report from the latest reporting year that was inserted last This applies if there are multiple facilities per organisation The organisation data is expected to be the same for both facilities."
    },
    {
      "message": " if cif_operator is null (new operator) or cif_operator exists and the swrs and cif names are identical (no manual update from the frontend), then we update the cif name."
    },
    {
      "message": "Deploy cif:util_functions/read_only_user_policies to pg"
    },
    {
      "message": "If policy already exists alter policy, else create a new policy"
    },
    {
      "message": "If policy already exists alter policy, else create a new policy"
    },
    {
      "message": " Deploy cif:database_functions/upsert_policy to pg requires: database_functions/create_roles"
    },
    {
      "message": " upsert_policy function with 5 parameters is for select, insert, delete statements and update operations where the using/with check statements are equal example: select cif_private.upsert_policy('test_policy', 'test_table', 'update', 'admin', 'true'); becomes: create policy test_policy on cif.test_table for update to admin using(true) with check(true);"
    },
    {
      "message": " case statement selections for the different operations (select/delete use a 'using' statement) (insert uses a 'with check' statement) (update uses both)"
    },
    {
      "message": " upsert_policy with 6 parameters is for update operations where the using/with check statements are different this version of the function requires 'using' and 'with check' to be defined in the using_statement and check_statement parameters example: select cif_private.upsert_policy('test_policy', 'test_table', 'update', 'admin', 'using(true)', 'with check(false)'); becomes: create policy test_policy on cif.test_table for update to admin using(true) with check(false);"
    },
    {
      "message": "Adding the archived_records_are_immutable trigger only with the archived_at column"
    },
    {
      "message": " Deploy cif:util/upsert_timestamp_columns to pg requires: trigger_function/update_timestamps"
    },
    {
      "message": "Deploy cif:util_functions/verify_function_not_present to pg"
    },
    {
      "message": "Deploy cif:util_functions/verify_function_not_present to pg"
    },
    {
      "message": "Verifies permission grants for all columns in a table"
    },
    {
      "message": "Verifies permission grants on specific columns in a table"
    },
    {
      "message": " Deploy cif:database_functions/verify_grants to pg requires: schema_cif"
    },
    {
      "message": "Verifies if a policy exists"
    },
    {
      "message": "Test for valid operation input"
    },
    {
      "message": "Parse operation into the appropriate polcmd char in pg_policy table"
    },
    {
      "message": "Get the table OID"
    },
    {
      "message": "Get the role OID"
    },
    {
      "message": "Determine if policy exists with correct policy name, operation, role and table"
    },
    {
      "message": "Throw exception if false (necessary for sqitch)"
    },
    {
      "message": "Else return true"
    },
    {
      "message": " Deploy cif:database_functions/verify_policy to pg requires: schema_cif"
    },
    {
      "message": "Deploy cif:database_functions/verify_policy_not_present to pg"
    },
    {
      "message": "Verifies if a policy exists"
    },
    {
      "message": "Get the table OID"
    },
    {
      "message": "Determine if policy exists with correct policy name, operation, role and table"
    },
    {
      "message": "Throw exception if true (necessary for sqitch)"
    },
    {
      "message": "Else return true"
    },
    {
      "message": "Deploy cif:util_functions/verify_type_not_present to pg"
    },
    {
      "message": "Revert cif:create_roles from pg"
    },
    {
      "message": " Deploy cif:computed_columns/full_name to pg requires: tables/cif_user"
    },
    {
      "message": "Revert cif:computed_columns/full_name from pg"
    },
    {
      "message": "Deploy cif:computed_columns/contact_full_name to pg"
    },
    {
      "message": "Revert cif:computed_columns/contact_full_name from pg"
    },
    {
      "message": "Revert cif:computed_columns/contact_full_phone from pg"
    },
    {
      "message": "Revert cif:computed_columns/contact_pending_form_change from pg"
    },
    {
      "message": "Revert cif:computed_columns/contact_pending_form_change_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:computed_columns/contact_pending_form_change_002_create_after_cif_user_update from pg"
    },
    {
      "message": " Deploy cif:emission_intensity_report_calculated_ei_performance to pg requires: tables/emission_intensity_report"
    },
    {
      "message": "Revert cif:emission_intensity_report_calculated_ei_performance from pg"
    },
    {
      "message": " Deploy cif:emission_intensity_report_calculated_ei_performance to pg requires: tables/emission_intensity_report"
    },
    {
      "message": "Deploy cif:computed_columns/form_change_as_emission_intensity_report to pg"
    },
    {
      "message": "The revert for the preceding change emission_intensity_report_001 must be done here or the revert for form_change_as_emission_intensity_reportwill not work. It will complain that it is returning too few columns."
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned emission_intensity_report record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": "Revert cif:computed_columns/form_change_as_emission_intensity_report from pg"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project to pg requires: tables/project requires: tables/project_001 requires: tables/form_change"
    },
    {
      "message": "The revert for the preceding change project_002_add_contract_number must be done here or the revert for form_change_as_project will not work.It will complain that it is returning too few columns."
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": "Revert cif:computed_columns/form_change_as_project from pg"
    },
    {
      "message": " Deploy cif:computed_columns/form_change_as_project to pg requires: tables/project requires: tables/project_001 requires: tables/form_change"
    },
    {
      "message": "The revert for the preceding change project_001 must be done here or the revert for form_change_as_project will not work.It will complain that it is returning too few columns."
    },
    {
      "message": "Given form_data_record_id can be null for some form_change records, it is not a reliable id value for the returned project_contact record.The returned id must not be null, so we use the form_change id being passed in as a parameter (multiplied by -1 to ensure we are not touching any existing records).This means the id value is not going to be the correct id for the returned project_contact record, which should be ok since we're only interestedin the data in new_form_data."
    },
    {
      "message": "Revert cif:computed_columns/form_change_as_project_contact from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_as_project_manager from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_as_reporting_requirement from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_calculated_ei_performance from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_calculated_gross_amount_this_milestone from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_calculated_holdback_amount_this_milestone from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_calculated_net_amount_this_milestone from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_calculated_total_payment_amount_to_date from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_eligible_expenses_to_date from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_gross_payments_to_date from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_holdback_amount_to_date from pg"
    },
    {
      "message": "Revert cif:form_change_is_pristine from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_is_unique_value from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_net_payments_to_date from pg"
    },
    {
      "message": "Revert cif:functions/form_change_parent_form_change_from_revision from pg"
    },
    {
      "message": " Deploy cif:functions/form_change_payment_percentage to pg requires: tables/form_change requires: computed_columns/emission_intensity_report_calculated_ei_performance 100 â€“ ((-1.5) x GHG Emission Intensity Performance + 145)"
    },
    {
      "message": "Revert cif:computed_column/form_change_payment_percentage from pg"
    },
    {
      "message": "Revert cif:computed_columns/form_change_reporting_requirement_status from pg"
    },
    {
      "message": "Revert cif:computed_columns/operator_pending_form_change from pg"
    },
    {
      "message": "Revert cif:computed_columns/operator_pending_form_change_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:computed_columns/operator_pending_form_change_002_create_after_cif_user_update from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_latest_committed_project_revision from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_next_milestone_due_date from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_pending_project_revision from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_primary_managers from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_anticipated_funding_amount_per_fiscal_year from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_effective_date from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_form_changes_for from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_gross_payment_amount from pg"
    },
    {
      "message": "Get individual milestone statuses"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_milestone_report_statuses to pg requires: tables/form_change"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_milestone_report_statuses from pg"
    },
    {
      "message": "Get individual milestone statuses"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_milestone_report_statuses to pg requires: tables/form_change"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_net_payment_amount from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_project_form_change.sql from pg"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_project_manager_form_changes_by_label to pg requires: tables/form_change requires: tables/project_manager"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_project_manager_form_changes_by_label from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_rank from pg"
    },
    {
      "message": "If we have only another status that is not 'Not Started' and that status is 'Filled' then we are complete"
    },
    {
      "message": " Deploy cif:computed_columns/project_revision_tasklist_status_for to pg requires: util_functions/get_form_status"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_tasklist_status_for from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_teimp_payment_amount from pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_teimp_payment_percentage to pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_teimp_payment_percentage from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_total_project_value from pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_type_row_number from pg"
    },
    {
      "message": "Deploy cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change to pg"
    },
    {
      "message": "Revert cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change from pg"
    },
    {
      "message": "Revert cif:computed_columns/reporting_requirement_has_expenses from pg"
    },
    {
      "message": "Revert cif:data/002_insert_json_schema_form_data_remove_default_from_annual_report_schema from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:data/005_insert_json_schema_form_data_remove_undefined_from_project_contact_schema from pg"
    },
    {
      "message": "No revert required."
    },
    {
      "message": "Revert cif:data/006_json_schema_project_manager_form_remove_default from pg"
    },
    {
      "message": "No revert required."
    },
    {
      "message": "Revert cif:migrations/insert_json_schema_form_data from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:data/insert_json_schema_form_data_project_summary from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:data/insert_json_schema_form_data_separate_EP_and_IA_funding_schemas from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:data/insert_json_schema_form_data_update_milestone_form_field_titles from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:data/insert_json_schema_form_dependency_update_milestone_form_total_eligible_expenses from pg"
    },
    {
      "message": "No revert required.This is an idempotent data insertion migration.Deleting this data before the cif.form table revert (where we drop the table itself)will likely cause foreign key reference errors."
    },
    {
      "message": "Revert cif:functions/funding_form_changes_to_separate_schemas from pg"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "it is necessary to put the values in a row(...) in case there is only one value;"
    },
    {
      "message": " Deploy cif:functions/handle_default_form_change_commit to pg requires: tables/form_change"
    },
    {
      "message": "Revert cif:functions/handle_default_form_change_commit from pg"
    },
    {
      "message": "Revert cif:functions/handle_milestone_form_change_commit from pg"
    },
    {
      "message": "Revert cif:functions/handle_project_summary_report_form_change_commit from pg"
    },
    {
      "message": "Revert cif:functions/migration_milestone_form_changes_to_single_form_change from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_form_change_for_table from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_form_change_for_table_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_form_change_for_table_002_create_after_cif_user_update from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_project_revision from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_project_revision_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:functions/pending_new_project_revision_002_create_after_cif_user_update from pg"
    },
    {
      "message": "Revert cif:functions/session from pg"
    },
    {
      "message": "Revert cif:functions/session_001_drop_function_before_table_update from pg"
    },
    {
      "message": "ensure null, empty, and whitespace _sub / idir_userid claims are filtered out"
    },
    {
      "message": "unique identifier can never be null"
    },
    {
      "message": "Revert cif:functions/session_002_create_function_after_table_update from pg"
    },
    {
      "message": "Revert cif:migrations/001_milestone_form_change_to_single_form_change from pg"
    },
    {
      "message": "nothing to revert, this is a one-way migration only."
    },
    {
      "message": "Revert cif:migrations/002_separate_funding_schemas_for_EP_and_IA from pg"
    },
    {
      "message": "no revert"
    },
    {
      "message": "Revert cif:mutations/add_additional_funding_source_to_revision from pg"
    },
    {
      "message": "Revert cif:mutations/add_contact_to_revision from pg"
    },
    {
      "message": " Deploy cif:mutations/add_emission_intensity_report_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": "Adding a emission intensity report to a project_revision is a chained operation. The data for emission is spread across two tables:- reporting_requirement (base table, common to all reports)- emission_intensity_report (data specific to emission intensity reports)Because this data is spread across two tables we have to create two form_change records within one transaction, one for each table."
    },
    {
      "message": "Revert cif:mutations/add_emission_intensity_report_to_revision from pg"
    },
    {
      "message": " Deploy cif:mutations/add_milestone_to_revision to pg requires: tables/reporting_requirement requires: tables/form_change"
    },
    {
      "message": "Adding a milestone to a project_revision is a chained operation. The data for milestones is spread across three tables:- reporting_requirement (base table, common to all reports)- milestone_report (data specific to milestone reports)- payment (payment data, common to some reports)Because this data is spread across three tables we have to create three form_change records within one transaction, one for each table."
    },
    {
      "message": "Revert cif:mutations/add_milestone_to_revision from pg"
    },
    {
      "message": "Revert cif:mutations/commit_form_change from pg"
    },
    {
      "message": "Deploy cif:mutations/commit_form_change to pg"
    },
    {
      "message": "TODO : add a conditional behaviour based on fc.form_id"
    },
    {
      "message": "Revert cif:mutations/commit_form_change from pg"
    },
    {
      "message": "Deploy cif:mutations/commit_project_revision to pg"
    },
    {
      "message": "defer FK constraints check to the end of the transaction"
    },
    {
      "message": " Propagate the change_status to all related form_change records Save the project table first to avoid foreign key violations from other potential tables."
    },
    {
      "message": "Deploy cif:mutations/commit_project_revision to pg"
    },
    {
      "message": "Revert cif:mutations/create_form_change from pg"
    },
    {
      "message": "project_id is null until the project is created"
    },
    {
      "message": " Deploy cif:mutations/create_project to pg requires: tables/project"
    },
    {
      "message": " Deploy cif:mutations/create_project to pg requires: tables/project"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "don't need to order before limiting or further filter because funding stream is immutable and will be the same in all form changes"
    },
    {
      "message": "Revert cif:mutations/create_project_revision from pg"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "Revert cif:mutations/create_project_revision to pg"
    },
    {
      "message": "Revert cif:mutations/create_project_revision from pg"
    },
    {
      "message": "Revert cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Deploy cif:mutations/create_project_revision to pg"
    },
    {
      "message": "non-milestone reporting requirements"
    },
    {
      "message": "milestone reporting requirements"
    },
    {
      "message": "Revert ggircs-app:mutations/create_user_from_session from pg"
    },
    {
      "message": "Revert cif:mutations/create_user_from_session_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:mutations/create_user_from_session_002_create_after_cif_user_update from pg"
    },
    {
      "message": "Deploy cif:mutations/delete_project_revision to pg"
    },
    {
      "message": "Deploy cif:mutations/delete_project_revision to pg"
    },
    {
      "message": "Revert cif:mutations/discard_additional_funding_source_form_change from pg"
    },
    {
      "message": "Revert cif:mutations/discard_emission_intensity_report from pg"
    },
    {
      "message": " Deploy cif:mutations/discard_funding_parameter_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a funding_parameter is a chained operation. The data for funding_parameter is spread across two tables:- reporting_requirement (base table, common to all reports)- funding_parameter (data specific to parameter_form)Because this data is spread across two tables we have to remove or archive two form_change records within one transaction, one for each table."
    },
    {
      "message": "Revert cif:mutations/discard_funding_parameter_form_change from pg"
    },
    {
      "message": " Deploy cif:mutations/discard_milestone_form_change to pg requires: tables/form_change requires: tables/project_revision"
    },
    {
      "message": "Removing or archiving a milestone is a chained operation. The data for milestones is spread across three tables:- reporting_requirement (base table, common to all reports)- milestone_report (data specific to milestone reports)- payment (payment data, common to some reports)Because this data is spread across three tables we have to remove or archive three form_change records within one transaction, one for each table."
    },
    {
      "message": "Revert cif:mutations/discard_milestone_form_change from pg"
    },
    {
      "message": "Revert cif:mutations/generate_annual_reports from pg"
    },
    {
      "message": "Revert cif:mutations/generate_quarterly_reports from pg"
    },
    {
      "message": "Deploy cif:mutations/generate_reports to pg"
    },
    {
      "message": "if start date is before or equal to jan 31st, we will start the first annual report on the same year otherwise we will start on the next year"
    },
    {
      "message": "choosing the closest quarter start date from a list of possible dates as a temporary table"
    },
    {
      "message": "generating the reports"
    },
    {
      "message": "Revert cif:mutations/generate_reports from pg"
    },
    {
      "message": "Revert cif:mutations/stage_dirty_form_changes from pg"
    },
    {
      "message": "Revert cif:mutations/stage_form_change from pg"
    },
    {
      "message": "Deploy cif:mutations/undo_form_changes to pg"
    },
    {
      "message": "Since project revision is the same for all form changes, we can just use the first one"
    },
    {
      "message": "we need to treat project overview table differently as it needs a null object as form data"
    },
    {
      "message": "Revert cif:mutations/undo_form_changes from pg"
    },
    {
      "message": "Deploy cif:mutations/undo_form_changes to pg"
    },
    {
      "message": "Since project revision is the same for all form changes, we can just use the first one"
    },
    {
      "message": "we need to treat project overview table differently as it needs a null object as form data"
    },
    {
      "message": "Revert cif:mutations/update_form_change from pg"
    },
    {
      "message": "Deploy cif:mutations/update_milestone_form_change to pg"
    },
    {
      "message": "Revert cif:mutations/update_milestone_form_change from pg"
    },
    {
      "message": "Deploy cif:mutations/update_or_create_user_from_session to pg"
    },
    {
      "message": " This function replaces the old cif.create_user_from_session and updates users based on email (unique in the IDIR realm) instead"
    },
    {
      "message": "Revert cif:mutations/update_or_create_user_from_session from pg"
    },
    {
      "message": "Revert cif:schema/cif from pg"
    },
    {
      "message": "Revert cif:schema/cif_private from pg"
    },
    {
      "message": "Revert cif:tables/additional_funding_source from pg"
    },
    {
      "message": "Revert cif:tables/additional_funding_source_status from pg"
    },
    {
      "message": "Revert cif:tables/amendment_status from pg"
    },
    {
      "message": "Revert cif:tables/amendment_type from pg"
    },
    {
      "message": "Revert cif:tables/attachment from pg"
    },
    {
      "message": "Revert cif:tables/change_status from pg"
    },
    {
      "message": "Revert cif:tables/cif_user on pg"
    },
    {
      "message": "Revert cif:tables/cif_user_001_drop_policies from pg"
    },
    {
      "message": "cif_internal RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_external RLS: can see all users, but can only modify its own record"
    },
    {
      "message": "cif_guest RLS: can only see its own (empty) record"
    },
    {
      "message": "Revert cif:tables/cif_user_002_uuid_to_session_sub from pg"
    },
    {
      "message": "Revert cif:tables/cif_user_003_create_policies from pg"
    },
    {
      "message": "Revert cif:tables/cif_user_004_allow_sub_update_flag from pg"
    },
    {
      "message": "Revert cif:tables/connect_session on pg"
    },
    {
      "message": "Revert cif:tables/contact from pg"
    },
    {
      "message": "Revert cif:tables/emission_intensity_payment_percent from pg"
    },
    {
      "message": "Revert cif:tables/emission_intensity_report from pg"
    },
    {
      "message": "Revert cif:tables/emission_intensity_report_001 from pg"
    },
    {
      "message": "The revert for emission_intensity_report_001 should already have been run in computed_columns/form_change_as_project as the columns need to bedropped for the function to properly be reverted. This revert will only be called in a development context where sqitchonly got deployed to emission_intensity_report_001."
    },
    {
      "message": "Revert cif:tables/form from pg"
    },
    {
      "message": " Deploy cif:tables/form to pg requires: schemas/main"
    },
    {
      "message": " No revert. Cannot change varchar back to regprocedure without error. Table will be dropped in original revert file."
    },
    {
      "message": "Revert cif:tables/audit from pg"
    },
    {
      "message": "Revert cif:tables/form_change_001 from pg"
    },
    {
      "message": "Revert cif:tables/full_backup_log from pg"
    },
    {
      "message": "Revert cif:tables/funding_parameter from pg"
    },
    {
      "message": "Revert cif:tables/funding_parameter_001 from pg"
    },
    {
      "message": "Revert cif:tables/funding_parameter_002_add_auto_generating_report_date_columns from pg"
    },
    {
      "message": "Revert cif:tables/funding_parameter_003_drop_total_project_value_column from pg"
    },
    {
      "message": "Revert cif:tables/funding_stream from pg"
    },
    {
      "message": "Revert cif:tables/funding_stream_project_status from pg"
    },
    {
      "message": "Revert cif:tables/funding_stream_rfp from pg"
    },
    {
      "message": "Revert cif:tables/funding_stream_rfp_project_status from pg"
    },
    {
      "message": "Revert cif:tables/funding_stream_rfp_project_status_001_drop_table from pg"
    },
    {
      "message": "Grant cif_internal permissions"
    },
    {
      "message": "Grant cif_admin permissions"
    },
    {
      "message": "Insert all possible combinations of funding_stream_rfp to project_status"
    },
    {
      "message": " Grant cif_external no permissions Grant cif_guest no permissions"
    },
    {
      "message": "Revert cif:tables/milestone_report from pg"
    },
    {
      "message": "Revert cif:tables/operator from pg"
    },
    {
      "message": "Revert cif:tables/payment from pg"
    },
    {
      "message": "Revert cif:tables/payment_001 from pg"
    },
    {
      "message": "Revert cif:tables/project from pg"
    },
    {
      "message": "Revert cif:tables/project_001 from pg"
    },
    {
      "message": "The revert for project_001 should already have been run in computed_columns/form_change_as_project as the columns need to bedropped for the function to properly be reverted. This revert will only be called in a development context where sqitchonly got deployed to project_001."
    },
    {
      "message": "Revert cif:tables/project_002_add_contract_number from pg"
    },
    {
      "message": "Revert cif:tables/project_003_add_immutable_funding_stream_trigger from pg"
    },
    {
      "message": "Revert cif:tables/project_contact from pg"
    },
    {
      "message": "Revert cif:tables/project_manager from pg"
    },
    {
      "message": "Revert cif:tables/project_manager_label from pg"
    },
    {
      "message": "Revert cif:tables/project_revision from pg"
    },
    {
      "message": "Revert cif:tables/project_revision_001_add_amendment_columns from pg"
    },
    {
      "message": "Revert cif:tables/project_revision_amendment_type_001_add_delete_permissions from pg"
    },
    {
      "message": "Revert cif:tables/project_revision_003_set_amendment_statuses from pg"
    },
    {
      "message": "Revert cif:tables/project_revision_004_add_pending_actions_from from pg"
    },
    {
      "message": "Revert cif:tables/project_revision_005_correct_revision_type from pg"
    },
    {
      "message": "one-way migration, no revert necessary."
    },
    {
      "message": "Revert cif:tables/project_revision_amendment_type from pg"
    },
    {
      "message": "Revert cif:tables/project_status from pg"
    },
    {
      "message": "Revert cif:tables/project_status_001_update_harcoded_values from pg"
    },
    {
      "message": "Add existing project status values"
    },
    {
      "message": "Rename project status values back to previous values"
    },
    {
      "message": "delete new status values"
    },
    {
      "message": "Revert cif:tables/project_type from pg"
    },
    {
      "message": "Revert cif:tables/reporting_requirement from pg"
    },
    {
      "message": "Revert cif:tables/report_type from pg"
    },
    {
      "message": "Deploy cif:tables/report_type to pg"
    },
    {
      "message": "Revert cif:tables/report_type_002 from pg"
    },
    {
      "message": "Revert cif:tables/report_type_003 from pg"
    },
    {
      "message": "Revert cif:tables/revision_status from pg"
    },
    {
      "message": "Revert cif:tables/revision_type from pg"
    },
    {
      "message": "Revert cif:tables/sector from pg"
    },
    {
      "message": "Revert cif:trigger_functions/archived_records_are_immutable from pg"
    },
    {
      "message": "Revert cif:trigger_functions/cif_user_session_sub_immutable_with_flag from pg"
    },
    {
      "message": "Revert cif:trigger_functions/committed_changes_are_immutable from pg"
    },
    {
      "message": "If there is no change in the form data, return the form_change record and do not touch the associated table."
    },
    {
      "message": "If the form has errors set, we don't commit the change and abort the transaction."
    },
    {
      "message": "it is necessary to put the values in a row(...) in case there is only one value;"
    },
    {
      "message": " Deploy cif:trigger_functions/commit_form_changes to pg requires: schemas/private"
    },
    {
      "message": "Revert cif:trigger_functions/commit_form_changes from pg"
    },
    {
      "message": "Deploy cif:trigger_functions/commit_project_revision to pg"
    },
    {
      "message": "If a project_id wasn't created, save it after the form_change row was committed"
    },
    {
      "message": " Propagate the change_status to all related form_change records Save the project table first do avoid foreign key violations from other potential tables."
    },
    {
      "message": "Revert cif:trigger_functions/commit_project_revision from pg"
    },
    {
      "message": "Revert cif:trigger_functions/funding_stream_is_immutable from pg"
    },
    {
      "message": "Revert cif:trigger_functions/operator_swrs_organisation_is_immutable from pg"
    },
    {
      "message": "Revert cif:trigger_functions/set_previous_form_change_id from pg"
    },
    {
      "message": "Revert cif:trigger_functions/set_user_id from pg"
    },
    {
      "message": "Revert cif:trigger_functions/set_user_id_001_drop_before_cif_user_update from pg"
    },
    {
      "message": "Revert cif:trigger_functions/set_user_id_002_create_after_cif_user_update from pg"
    },
    {
      "message": "Revert cif:trigger_functions/update_timestamps from pg"
    },
    {
      "message": "Revert cif:trigger_functions/update_timestamps_001_uuid_to_session_sub from pg"
    },
    {
      "message": "Revert cif:types/form_change_operation from pg"
    },
    {
      "message": " Deploy cif:types/keycloak_jwt to pg requires: schemas/main"
    },
    {
      "message": "Revert cif:types/keycloak_jwt from pg"
    },
    {
      "message": "Revert cif:types/manager_form_changes_by_label_composite_return from pg"
    },
    {
      "message": "Revert cif:types/milestone_report_status_return from pg"
    },
    {
      "message": "Revert cif:types/sum_by_fiscal_year from pg"
    },
    {
      "message": "Revert cif:util_functions/camel_to_snake_case from pg"
    },
    {
      "message": "Revert cif:util_functions/get_fiscal_year_from_timestamp from pg"
    },
    {
      "message": " Deploy cif:util_functions/get_form_status to pg requires: tables/form_change"
    },
    {
      "message": "Revert cif:util_functions/get_form_status from pg"
    },
    {
      "message": "Deploy cif:util_functions/get_form_status_001 to pg"
    },
    {
      "message": "return not started for empty project form"
    },
    {
      "message": "Revert cif:util_functions/get_form_status_001 from pg"
    },
    {
      "message": "Revert cif:util_functions/grant_permissions from pg"
    },
    {
      "message": "Revert cif:util_functions/import_swrs_operators from pg"
    },
    {
      "message": "Deploy cif:util_functions/import_swrs_operators_from_fdw to pg"
    },
    {
      "message": "Upsert the latest organisation data into the cif.operator table if the data has not been changed by a cif user"
    },
    {
      "message": " This functions queries the SWRS tables and commits form_change records to the cif database. It is meant to be used in conjunction to a foreign data wrapper to the SWRS database's operator and report tables."
    },
    {
      "message": " Pick the report from the latest reporting year that was inserted last This applies if there are multiple facilities per organisation The organisation data is expected to be the same for both facilities."
    },
    {
      "message": " if cif_operator is null (new operator) or cif_operator exists and the swrs and cif names are identical (no manual update from the frontend), then we update the cif name."
    },
    {
      "message": "Revert cif:util_functions/import_swrs_operators_from_fdw from pg"
    },
    {
      "message": "Revert cif:util_functions/read_only_user_policies from pg"
    },
    {
      "message": "Revert cif:util_functions/upsert_policy from pg"
    },
    {
      "message": "Revert cif:util_functions/upsert_timestamp_columns from pg"
    },
    {
      "message": "Deploy cif:util_functions/verify_function_not_present to pg"
    },
    {
      "message": "Revert cif:util_functions/verify_function_not_present from pg"
    },
    {
      "message": "Revert cif:util_functions/verify_grant from pg"
    },
    {
      "message": "Revert cif:util_functions/verify_policy from pg"
    },
    {
      "message": "Revert cif:util_functions/verify_policy_not_present from pg"
    },
    {
      "message": "Revert cif:util_functions/verify_type_not_present from pg"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "make sure the function exists"
    },
    {
      "message": "create an inital form_change record"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "should return 100 if payment percentage is very large (over 100%)"
    },
    {
      "message": "should return 0 if payment percentage is negative"
    },
    {
      "message": "200.00,"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "Late"
    },
    {
      "message": "On track"
    },
    {
      "message": "Completed"
    },
    {
      "message": "Null"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "mock datacreate mock projectcreate mock project revisioncreate mock report typecreate mock reporting requirement (several)test cases:start with submitted reporting requirement (no upcoming), test that that's what we get backadd an upcoming reporting requirement, test that that's what we get back (coalesce should give back this one if it exists)add several upcoming reports, make sure we get the next one-> use create project in create project revision functions rather than inserts"
    },
    {
      "message": "Create mock user"
    },
    {
      "message": "Create mock operator"
    },
    {
      "message": "Create mock project"
    },
    {
      "message": "Create mock report type"
    },
    {
      "message": "Create mock reporting requirement"
    },
    {
      "message": "create three projects"
    },
    {
      "message": "project 1, milestone 1, 2021/2022 (date sent to csnr), calculated gross"
    },
    {
      "message": "project 1, milestone 2, 2021/2022 (date sent to csnr), adjusted gross"
    },
    {
      "message": "project 1, milestone 3, 2024/2025 (submittedDate), adjusted gross"
    },
    {
      "message": "project 1, milestone 4, 2024/2025 (dateSentToCsnr), archived"
    },
    {
      "message": "project 2, milestone 1, 2021/2022 (due date)"
    },
    {
      "message": "project 2, milestone 2, 2023/2024 (date sent to csnr)"
    },
    {
      "message": "project 3, milestone 1, null"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "Change the updated_at values for the project revisions"
    },
    {
      "message": "This form is a decoy to make sure we test the json filtering"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "TODO: Implement this as part of #986"
    },
    {
      "message": "Stage form changes"
    },
    {
      "message": "Add errors"
    },
    {
      "message": "Create new form_change records & link them the the previous records"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "TODO: Implement this as part of #986"
    },
    {
      "message": "don't show all the truncate messages"
    },
    {
      "message": "Create 3 records in revision 1 (committed) non-archived label ids: 1,2,3"
    },
    {
      "message": "Archive a record and update a record in revision 2 (committed) non-archived label ids:: 2,3"
    },
    {
      "message": "Create a record, update a record and archive a record in revision 3 (pending) non-archived label ids: 2,4"
    },
    {
      "message": "Create a record in a different project (committed)"
    },
    {
      "message": "Create a record in a different project (pending)"
    },
    {
      "message": "Commit / Update Revisions as user 1."
    },
    {
      "message": "Ensure the updated_at timestamps make sense (Not all are updated at the same time, group and stagger the updates by revision)"
    },
    {
      "message": "Basic Setup: Entities needed by dependency"
    },
    {
      "message": "Basic Setup End"
    },
    {
      "message": "Create form_change records for testing.There are 12 form_change records in total.9 form_change records are for project with id = 1There are 3 revisions within these 10 form_change records.The flow is:Revision id=1 (committed):create 3 recordsRevision id=2 (committed):delete 1 record created in revision 1update 1 record created in revision 1(one update is an unchanged record from revision 1)Revision id=3 (pending) - This pending revision is the main focus of the tests:create 1 recorddelete 1 recordupdate 1 recordThere are 2 revisions for project with id = 2These are here to make sure that the function does not return any form_change records for projects outside the scope of the project_revision passed as a parameter.Revision id=4 is committedRevision id=5 is pending"
    },
    {
      "message": "What form_change data should be returned for each manager label record in revision 3:1 Label: null (archived in revision 2)2 Label: '{\"projectId\": 1, \"cifUserId\": 1, \"projectManagerLabelId\": 2}' - (updated in revision 3)3 Label: null (archived in revision 3)4 Label: '{\"projectId\": 1, \"cifUserId\": 2, \"projectManagerLabelId\": 4}' - (created by user 2 in revision 3 AFTER user 1 created it in the same revision)"
    },
    {
      "message": "TESTS"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "previous form change"
    },
    {
      "message": "pending, is_pristine = true"
    },
    {
      "message": "staged, no validation errors"
    },
    {
      "message": "previous form change"
    },
    {
      "message": "pending, is_pristine = true"
    },
    {
      "message": "staged, no validation errors"
    },
    {
      "message": "pending, is_pristine = true"
    },
    {
      "message": "staged, no validation errors"
    },
    {
      "message": "-------------------- Without Json Matching ---------------------- */"
    },
    {
      "message": "Change new_form_data to make is_pristine = false"
    },
    {
      "message": "Add validation_errors"
    },
    {
      "message": "it returns null when the table argument is null"
    },
    {
      "message": "it returns Not Started when there are no form_change records and the is_first_revision is true"
    },
    {
      "message": "-------------------- With Json Matching ---------------------- */"
    },
    {
      "message": "Change new_form_data to make is_pristine = false"
    },
    {
      "message": "Add validation_errors"
    },
    {
      "message": "Mock cif.get_form_status() to return 'Attention Required' and another status to ensure 'Attention Required' gets the highest priority."
    },
    {
      "message": " These forms are a decoy to make sure we test the json filtering They should not be taken in account when computing the status with the json_matcher previous form change"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "---------------------- Without Json Matching ----------------------"
    },
    {
      "message": "---------------------- With Json Matching ----------------------"
    },
    {
      "message": "mock functions"
    },
    {
      "message": "Test Case: 0.75 * (123600.78 - 100100.78) = 375"
    },
    {
      "message": "Setup"
    },
    {
      "message": "The containing reporting requirement"
    },
    {
      "message": "One emission intensity report"
    },
    {
      "message": "Doesn't blow up if we divide by zero"
    },
    {
      "message": "Doesn't blow up if data is missing"
    },
    {
      "message": "only takes in account non-archiving form_changes (operation not archive)"
    },
    {
      "message": " returns the right value if performance is integer between 30 and 100 ((30-20) / (30-10))*100 = 50%"
    },
    {
      "message": " returns the right value if performance is fractional between 30 and 100 ((30-19) / (30-15))*100 = 73.33..%"
    },
    {
      "message": " returns the right value if performance is below 30 ((30-29) / (30-15))*100 = 6.66..%"
    },
    {
      "message": " returns the right value if performance is above 100 ((30-29) / (30-15))*100 = 6.66..%"
    },
    {
      "message": " Uses the adjusted emissions intensity performance if set 43% emissions performance means 20% payment"
    },
    {
      "message": "funding parameter without max funding amount and proponent cost"
    },
    {
      "message": "funding parameter with max funding amount, proponent cost and additional funding sources"
    },
    {
      "message": "funding parameter with max funding amount and proponent cost but no additional funding sources"
    },
    {
      "message": "adding additional funding sources"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "returns the earliest form_change without a submitted_date when no report_type is specified"
    },
    {
      "message": "returns the earliest form_change of that type without a submitted_date when the report_type is specified"
    },
    {
      "message": "returns null when all reports of that type are submitted and the report_type is specified"
    },
    {
      "message": "returns null when no form_changes are present"
    },
    {
      "message": "returns null when all reports have been submitted and no report_type is specified"
    },
    {
      "message": "returns null when no form_changes are present"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "test setup"
    },
    {
      "message": "add funding parameter form as we already removed it from the schema by a previous migration but this is needed for the test and fixing the migration"
    },
    {
      "message": "add funding parameter form_change records"
    },
    {
      "message": "test setup ends"
    },
    {
      "message": " EP 2019 EP 2020 EP 2021 IA 2021 IA 2022"
    },
    {
      "message": "setting a form change record"
    },
    {
      "message": "make sure the function exists"
    },
    {
      "message": "function creates a table record"
    },
    {
      "message": "doesnt insert if the data is missing required fields"
    },
    {
      "message": "inserts with default value if data is missing"
    },
    {
      "message": "Does not throw with empty data & returns the form_data_record_id of the form_change parameter passed in"
    },
    {
      "message": "setting up pending change without specifying the record id"
    },
    {
      "message": "setting up pending change without specifying the record id"
    },
    {
      "message": "Function does not error when form_data object contains keys that are not columns in the target table (deprecated columns)"
    },
    {
      "message": " set client_min_messages to debug; archive test"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "reporting_requiement table"
    },
    {
      "message": "milestone_report table"
    },
    {
      "message": "payment table"
    },
    {
      "message": "The next three tests confirm that the correct values were added to their three corresponsing tables when the form_change operation is \"update\""
    },
    {
      "message": "reporting_requiement table"
    },
    {
      "message": "milestone_report table"
    },
    {
      "message": "payment table"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "The next three tests confirm that the correct values were added to their three corresponsing tables (reporting_requirement, milestone_report, & payment)after performing the commit, when the form_change operation is \"create\""
    },
    {
      "message": "reporting_requiement table"
    },
    {
      "message": "payment table"
    },
    {
      "message": "reporting_requiement table"
    },
    {
      "message": "payment table"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "some of these fields are unnecessary eg. emission_intensity and milestone"
    },
    {
      "message": "SETUP END"
    },
    {
      "message": "The next two tests confirm that the correct values were added to their corresponding tables (reporting_requirement & payment)after performing the commit, when the form_change operation is \"create\""
    },
    {
      "message": "The next two tests confirm that the correct values were added to their two corresponding tables (reporting_requirement & payment)after performing the commit, when the form_change operation is \"update\""
    },
    {
      "message": "Test Setup --"
    },
    {
      "message": "first project with no data - and no expenses"
    },
    {
      "message": "second project with all the data - and expenses"
    },
    {
      "message": "An existing reporting requirement, different from a milestone"
    },
    {
      "message": "We can't use the cif.create_project_revision() function since it is already updated with the new milestone schema, so we create the form_changes manually."
    },
    {
      "message": "End Test Setup --"
    },
    {
      "message": "it transforms the existing form_change for the reporting_requirement into the new format"
    },
    {
      "message": "it doesn't touch the form changes not in a revision"
    },
    {
      "message": "it doesn't touch the reporting requirement form changes that are not for the General, Advanced or Reporting milestones."
    },
    {
      "message": " A separate form change without a revision that should be left untouched even if it makes little sense, context-wise"
    },
    {
      "message": " At this point, we have 3 revisions: One committed (id=1) and one pending (id=3) for the project_id=1 with the milestone form_change ids being 3 and 12 One pending (id=2) for the project_id=2 with the milestone form_change id being 6"
    },
    {
      "message": " it takes the milestone data from existing revisions and puts them into the new json schema for committed form changes for pending form changes"
    },
    {
      "message": " It is idempotent We re-run the first 3 tests to make sure nothing has changed"
    },
    {
      "message": "reset time to now();"
    },
    {
      "message": "restart the id sequences"
    },
    {
      "message": "fill the forms and commit the current project revision"
    },
    {
      "message": "A deleted revision is not returned"
    },
    {
      "message": "it inserts a new record"
    },
    {
      "message": "it returns the newly inserted record"
    },
    {
      "message": "it inserts a new record"
    },
    {
      "message": "it returns the newly inserted record with the"
    },
    {
      "message": "Test Setup"
    },
    {
      "message": "it inserts a new record"
    },
    {
      "message": "it returns two form_change records, one for each of the reporting_requirement and emission_intensity_report tables."
    },
    {
      "message": "Commit the form_change records to populate the related tables with data"
    },
    {
      "message": "setting a form change record"
    },
    {
      "message": "make sure the function exists"
    },
    {
      "message": "Calls the proper function set in the form table"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "Returns the committed form_change record"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "make sure the function exists"
    },
    {
      "message": "make sure project_revision has a null project id"
    },
    {
      "message": "call the mutation that sets values"
    },
    {
      "message": "make sure project_revision has a project id equal to the one that was in the form"
    },
    {
      "message": "make sure project_contact has a project id equal to the one that was in the form"
    },
    {
      "message": "Delete the project form_change to create a broken foreign key constraint"
    },
    {
      "message": "Check revision_status is correctly applied"
    },
    {
      "message": " propagates the status change to all form changes no matter what make sure project_revision and form changes are created with change status 'pending'"
    },
    {
      "message": "BEGIN SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "Create a second set of records to check our deferred constraints"
    },
    {
      "message": "create an update for our comitted project, but don't commit it yet"
    },
    {
      "message": "restart the id sequences"
    },
    {
      "message": "restart the id sequences"
    },
    {
      "message": "creating a second project to test the sequences"
    },
    {
      "message": " This test calls the create_project(funding_stream_rpf_id integer) function, effects will be tested in the following tests"
    },
    {
      "message": "restart the id sequences"
    },
    {
      "message": "adding additional funding sources"
    },
    {
      "message": "to discard a form change with update operation"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "Test Setup"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "Returns the updated form_change record"
    },
    {
      "message": "Sets the change_status to 'staged'"
    },
    {
      "message": "It only updates the new_form_data, validation_errors and operation fields"
    },
    {
      "message": "previous form change"
    },
    {
      "message": "we are calling the function once with an array of form_change_ids"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "It returns the updated record"
    },
    {
      "message": "It sets the change_status to pending every time"
    },
    {
      "message": "It only updates the new_form_data, validation_errors and operation fields"
    },
    {
      "message": "It returns the updated record with the proper calculated value for gross amount"
    },
    {
      "message": "It returns the updated record with the proper calculated value for gross amount"
    },
    {
      "message": "It returns the updated record with the proper calculated value for holdback amount"
    },
    {
      "message": "It returns the updated record with the proper adjusted value for gross amount"
    },
    {
      "message": "It returns the updated record with the proper calculated value for net amount when gross amount is adjusted"
    },
    {
      "message": "It returns the updated record with the proper calculated value for holdback amount when gross amount is adjusted"
    },
    {
      "message": "It properly updates form data other than calculated values"
    },
    {
      "message": "It makes the total eligible expenses null when report type is not general milestone"
    },
    {
      "message": "It populates the total eligible expenses with the correct value when report type is general milestone"
    },
    {
      "message": "It updates the total eligible expenses with the correct value when updating the total eligible expenses field"
    },
    {
      "message": "SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "Returns the user that was created"
    },
    {
      "message": "Adds a user if the email doesn't exist in the system"
    },
    {
      "message": "Updates the sub if the email already exists and we allow the sub update, and disallows sub update from then on"
    },
    {
      "message": "Throws if we try to change the sub on a user that doesn't have the flag set"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "TODO add testing for attachment table"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Try to update user data where session_sub does not match"
    },
    {
      "message": "cif_external"
    },
    {
      "message": "Try to update user data where session_sub does not match"
    },
    {
      "message": "cif_guest"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Trigger tests --"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "test EP and IA statuses"
    },
    {
      "message": "test EP only statuses"
    },
    {
      "message": "test IA only statuses"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "need to truncate the table before testing insert/update stuff"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "to check unique constraint"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup --"
    },
    {
      "message": "disable blocking triggers"
    },
    {
      "message": "set different statuses for testing"
    },
    {
      "message": "set database to pre-migration state"
    },
    {
      "message": "perform migration"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup --"
    },
    {
      "message": "Trigger tests --"
    },
    {
      "message": "test project_revision_001_add_revision_type"
    },
    {
      "message": "use the contents of the revert file to set the database to a state where revision_type isn't required"
    },
    {
      "message": "deploy the project_revision_001_add_revision_type migration"
    },
    {
      "message": "Test Setup"
    },
    {
      "message": "Row level security tests --"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "11 project types + project type added in earlier test = 12"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "5 because 'Approved' was removed"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "set jwt.claims.sub to '11111111-1111-1111-1111-111111111111';"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "cif_admin"
    },
    {
      "message": "cif_internal"
    },
    {
      "message": "Testing table with a archived_at column"
    },
    {
      "message": "make sure the function exists"
    },
    {
      "message": "create an inital form_change record"
    },
    {
      "message": "Commit the initial form_change"
    },
    {
      "message": "Create a set of pending form_change records"
    },
    {
      "message": "Commit the pending form_change records"
    },
    {
      "message": "Create a set of form_change records for a new revision"
    },
    {
      "message": "TEST SETUP"
    },
    {
      "message": "END SETUP"
    },
    {
      "message": "attemp to update the user_id to a different user"
    },
    {
      "message": "Init test"
    },
    {
      "message": "Sets created_at/by on insert when all columns exist"
    },
    {
      "message": "Sets updated_at/by on update when all columns exist"
    },
    {
      "message": "Sets archived_by on update when archived_at is changed"
    },
    {
      "message": "Trigger does not error on insert when no created_at/by columns exist"
    },
    {
      "message": "Trigger does not error on update when no updated_at/by columns exist"
    },
    {
      "message": "Daylight savings in 2021 was Mar 14 - Nov 7"
    },
    {
      "message": "test 1"
    },
    {
      "message": "test 2"
    },
    {
      "message": "test 3"
    },
    {
      "message": "test 4"
    },
    {
      "message": "test 5"
    },
    {
      "message": "test 6"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "Manually update data & run the import function again"
    },
    {
      "message": "updating the foreign data, renaming an operator"
    },
    {
      "message": "For this test, some setup was done in schema/data/test_setup/external_database_setup.sqlThe data inserted in this file looks like this:insert into swrs.report(id, swrs_organisation_id, reporting_period_duration)values(1, 1, 2019),(2, 1, 2020),(3, 2, 2020),(4, 3, 2020);insert into swrs.organisation(id, report_id, swrs_organisation_id, business_legal_name, english_trade_name)values(1, 1, 1, '2019 legal name 1', '2019 legal name 1'),(2, 2, 1, '2020 legal name 1', '2020 trade name 1'),(3, 3, 2, '2020 legal name 2', '2020 trade name 2'),(4, 4, 3, '2020 legal name 3', '2020 trade name 3');"
    },
    {
      "message": "Test setup"
    },
    {
      "message": "created_*, updated_*, deleted_* columns exist"
    },
    {
      "message": "*_by columns are foreign keys"
    },
    {
      "message": "Indices exist"
    },
    {
      "message": "triggers are added"
    },
    {
      "message": "Passes when should pass"
    },
    {
      "message": "Throws when should throw"
    },
    {
      "message": "Passes when should pass"
    },
    {
      "message": "Throws when should throw"
    },
    {
      "message": "Passes when should pass"
    },
    {
      "message": "Throws when should throw"
    },
    {
      "message": "Verify cif:create_roles on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_full_name on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_full_name on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_full_name on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_full_name on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_full_phone on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_pending_form_change on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_pending_form_change_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:computed_columns/contact_pending_form_change_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:emission_intensity_report_calculated_ei_performance on pg"
    },
    {
      "message": "Verify cif:emission_intensity_report_calculated_ei_performance on pg"
    },
    {
      "message": "Verify cif:emission_intensity_report_calculated_ei_performance on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_emission_intensity_report on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_emission_intensity_report on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_project on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_project on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_project on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_project_contact on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_project_manager on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_as_reporting_requirement on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_calculated_ei_performance on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_calculated_gross_amount_this_milestone on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_calculated_holdback_amount_this_milestone on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_calculated_net_amount_this_milestone on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_calculated_total_payment_amount_to_date on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_eligible_expenses_to_date on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_gross_payments_to_date on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_holdback_amount_to_date on pg"
    },
    {
      "message": "Verify cif:form_change_is_pristine on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_is_unique_value on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_net_payments_to_date on pg"
    },
    {
      "message": "Verify cif:functions/form_change_parent_form_change_from_revision on pg"
    },
    {
      "message": "Verify cif:computed_column/form_change_payment_percentage on pg"
    },
    {
      "message": "Verify cif:computed_column/form_change_payment_percentage on pg"
    },
    {
      "message": "Verify cif:computed_columns/form_change_reporting_requirement_status on pg"
    },
    {
      "message": "Verify cif:computed_columns/operator_pending_form_change on pg"
    },
    {
      "message": "Verify cif:computed_columns/operator_pending_form_change_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:computed_columns/operator_pending_form_change_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_latest_committed_project_revision on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_next_milestone_due_date on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_pending_project_revision on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_primary_managers on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_anticipated_funding_amount_per_fiscal_year on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_effective_date on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_form_changes_for on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_gross_payment_amount on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_milestone_report_statuses on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_milestone_report_statuses on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_milestone_report_statuses on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_net_payment_amount on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_project_form_change.sql on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_project_manager_form_changes_by_label on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_project_manager_form_changes_by_label on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_rank on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_tasklist_status_for on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_tasklist_status_for on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_teimp_payment_amount on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_teimp_payment_percentage on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_teimp_payment_percentage on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_total_project_value on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_type_row_number on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change on pg"
    },
    {
      "message": "Verify cif:computed_columns/project_revision_upcoming_reporting_requirement_form_change on pg"
    },
    {
      "message": "Verify cif:computed_columns/reporting_requirement_has_expenses on pg"
    },
    {
      "message": "Verify cif:data/002_insert_json_schema_form_data_remove_default_from_annual_report_schema on pg"
    },
    {
      "message": "Verify cif:data/005_insert_json_schema_form_data_remove_undefined_from_project_contact_schema on pg"
    },
    {
      "message": "Verify cif:data/006_json_schema_project_manager_form_remove_default on pg"
    },
    {
      "message": "Verify cif:migrations/insert_json_schema_form_data on pg"
    },
    {
      "message": "Verify cif:data/insert_json_schema_form_data_project_summary on pg"
    },
    {
      "message": "Verify cif:data/insert_json_schema_form_data_separate_EP_and_IA_funding_schemas on pg"
    },
    {
      "message": "Verify cif:data/insert_json_schema_form_data_update_milestone_form_field_titles on pg"
    },
    {
      "message": "Verify cif:data/insert_json_schema_form_dependency_update_milestone_form_total_eligible_expenses on pg"
    },
    {
      "message": "Verify cif:functions/funding_form_changes_to_separate_schemas on pg"
    },
    {
      "message": "Verify cif:functions/handle_default_form_change_commit on pg"
    },
    {
      "message": "Verify cif:functions/handle_default_form_change_commit on pg"
    },
    {
      "message": "Verify cif:functions/handle_milestone_form_change_commit on pg"
    },
    {
      "message": "Verify cif:functions/handle_project_summary_report_form_change_commit on pg"
    },
    {
      "message": "Verify cif:functions/migration_milestone_form_changes_to_single_form_change on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_form_change_for_table on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_form_change_for_table_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_form_change_for_table_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_project_revision on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_project_revision_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:functions/pending_new_project_revision_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:functions/session on pg"
    },
    {
      "message": "Verify cif:functions/session_001_drop_function_before_table_update on pg"
    },
    {
      "message": "Verify cif:functions/session_002_create_function_after_table_update on pg"
    },
    {
      "message": "Verify cif:migrations/001_milestone_form_changes_to_single_form_change on pg"
    },
    {
      "message": "If the migration has been applied, there are no form_changes for milestone_report or payment tables that are not archived."
    },
    {
      "message": "Verify cif:migrations/002_separate_funding_schemas_for_EP_and_IA on pg"
    },
    {
      "message": "Verify cif:mutations/add_additional_funding_source_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/add_contact_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/add_emission_intensity_report_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/add_emission_intensity_report_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/add_milestone_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/add_milestone_to_revision on pg"
    },
    {
      "message": "Verify cif:mutations/commit_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/commit_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/commit_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/commit_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/commit_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/create_project on pg"
    },
    {
      "message": "Verify cif:mutations/create_project on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/create_project_revision on pg"
    },
    {
      "message": "Verify ggircs-app:mutations/create_user_from_session on pg"
    },
    {
      "message": "Verify cif:mutations/create_user_from_session_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:mutations/create_user_from_session_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:mutations/delete_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/delete_project_revision on pg"
    },
    {
      "message": "Verify cif:mutations/discard_additional_funding_source_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/discard_emission_intensity_report on pg"
    },
    {
      "message": "Verify cif:mutations/discard_funding_parameter_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/discard_funding_parameter_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/discard_milestone_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/discard_milestone_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/generate_annual_reports on pg"
    },
    {
      "message": "Verify cif:mutations/generate_quarterly_reports on pg"
    },
    {
      "message": "Verify cif:mutations/generate_reports on pg"
    },
    {
      "message": "Verify cif:mutations/generate_reports on pg"
    },
    {
      "message": "Verify cif:mutations/stage_dirty_form_changes on pg"
    },
    {
      "message": "Verify cif:mutations/stage_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/undo_form_changes on pg"
    },
    {
      "message": "Verify cif:mutations/undo_form_changes on pg"
    },
    {
      "message": "Verify cif:mutations/undo_form_changes on pg"
    },
    {
      "message": "Verify cif:mutations/update_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/update_milestone_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/update_milestone_form_change on pg"
    },
    {
      "message": "Verify cif:mutations/update_or_create_user_from_session on pg"
    },
    {
      "message": "Verify cif:mutations/update_or_create_user_from_session on pg"
    },
    {
      "message": "Verify cif:schema/cif on pg"
    },
    {
      "message": "Verify cif:schema/cif_private on pg"
    },
    {
      "message": "Verify cif:tables/additional_funding_source on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/additional_funding_source_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/amendment_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/amendment_type on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/attachment on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/change_status on pg"
    },
    {
      "message": "Verify cif:tables/cif_user on pg"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "cif_guest grant"
    },
    {
      "message": "Verify cif:tables/cif_user_001_drop_policies on pg"
    },
    {
      "message": "Verify cif:tables/cif_user_002_uuid_to_session_sub on pg"
    },
    {
      "message": "Verify cif:tables/cif_user_003_create_policies on pg"
    },
    {
      "message": "Verify cif:tables/cif_user_004_allow_sub_update_flag on pg"
    },
    {
      "message": "Verify cif:tables/connect_session on pg"
    },
    {
      "message": "Verify cif:tables/contact on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/emission_intensity_payment_percent on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/emission_intensity_report on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/emission_intensity_report_001 on pg"
    },
    {
      "message": "Verify cif:tables/form on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/form on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/audit on pg"
    },
    {
      "message": "Verify cif:tables/form_change_001 on pg"
    },
    {
      "message": "Verify cif:tables/full_backup_log on pg"
    },
    {
      "message": "Verify cif:tables/funding_parameter on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/funding_parameter_001 on pg"
    },
    {
      "message": "Verify cif:tables/funding_parameter_002_add_auto_generating_report_date_columns on pg"
    },
    {
      "message": "Verify cif:tables/funding_parameter_003_drop_total_project_value_column on pg"
    },
    {
      "message": "Verify cif:tables/funding_stream on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/funding_stream_project_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/funding_stream_rfp on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/funding_stream_rfp_project_status_project_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/funding_stream_rfp_project_status_001_drop_table on pg"
    },
    {
      "message": "Verify cif:tables/milestone_report on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/operator on pg"
    },
    {
      "message": "Verify cif:tables/payment_001 on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_001 on pg"
    },
    {
      "message": "Verify cif:tables/project_002_add_contract_number on pg"
    },
    {
      "message": "Verify cif:tables/project_003_add_immutable_funding_stream_trigger on pg"
    },
    {
      "message": "Verify cif:tables/project_contact on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_manager on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_manager_label on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_revision on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_revision_001_add_amendment_columns on pg"
    },
    {
      "message": "Verify cif:tables/project_revision_amendment_type_001_add_delete_permissions on pg"
    },
    {
      "message": "Verify cif:tables/project_revision_003_set_amendment_statuses on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_revision_004_add_pending_actions_from on pg"
    },
    {
      "message": "Verify cif:tables/project_revision_amendment_type on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/project_status_001_update_harcoded_values on pg"
    },
    {
      "message": "check all new values are present"
    },
    {
      "message": "check all old values are gone"
    },
    {
      "message": "Verify cif:tables/project_type on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/reporting_requirement on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/report_type on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/report_type_002 on pg"
    },
    {
      "message": "Verify cif:tables/report_type_003 on pg"
    },
    {
      "message": "Verify cif:tables/revision_status on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/revision_type on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:tables/sector on pg"
    },
    {
      "message": "cif_internal Grants"
    },
    {
      "message": "cif_admin Grants"
    },
    {
      "message": "Verify cif:trigger_functions/archived_records_are_immutable on pg"
    },
    {
      "message": "Verify cif:trigger_functions/cif_user_session_sub_immutable_with_flag on pg"
    },
    {
      "message": "Verify cif:trigger_functions/committed_changes_are_immutable on pg"
    },
    {
      "message": "Verify cif:trigger_functions/commit_form_changes on pg"
    },
    {
      "message": "Verify cif:trigger_functions/commit_form_changes on pg"
    },
    {
      "message": "Verify cif:trigger_functions/commit_project_revision on pg"
    },
    {
      "message": "Verify cif:trigger_functions/commit_project_revision on pg"
    },
    {
      "message": "Verify cif:trigger_functions/funding_stream_is_immutable on pg"
    },
    {
      "message": "Verify cif:trigger_functions/operator_swrs_organisation_is_immutable on pg"
    },
    {
      "message": "Verify cif:trigger_functions/set_previous_form_change_id on pg"
    },
    {
      "message": "Verify cif:function_set_user_id on pg"
    },
    {
      "message": "Verify cif:trigger_functions/set_user_id_001_drop_before_cif_user_update on pg"
    },
    {
      "message": "Verify cif:trigger_functions/set_user_id_002_create_after_cif_user_update on pg"
    },
    {
      "message": "Verify cif:function_update_timestamps on pg"
    },
    {
      "message": "Verify cif:trigger_functions/update_timestamps_001_uuid_to_session_sub on pg"
    },
    {
      "message": "Verify cif:types/form_change_operation on pg"
    },
    {
      "message": "Verify cif:type_keycloak_jwt on pg"
    },
    {
      "message": "Verify cif:type_keycloak_jwt on pg"
    },
    {
      "message": "Verify cif:types/manager_form_changes_by_label_composite_return on pg"
    },
    {
      "message": "Verify cif:types/milestone_report_status_return on pg"
    },
    {
      "message": "Verify cif:types/sum_by_fiscal_year on pg"
    },
    {
      "message": "Verify cif:util_functions/camel_to_snake_case on pg"
    },
    {
      "message": "Verify cif:util_functions/get_fiscal_year_from_timestamp on pg"
    },
    {
      "message": "Verify cif:util_functions/get_form_status on pg"
    },
    {
      "message": "Verify cif:util_functions/get_form_status on pg"
    },
    {
      "message": "Verify cif:util_functions/get_form_status_001 on pg"
    },
    {
      "message": "Verify cif:util_functions/get_form_status_001 on pg"
    },
    {
      "message": "Verify cif:database_functions/grant_permissions on pg"
    },
    {
      "message": "Verify cif:util_functions/import_swrs_operators on pg"
    },
    {
      "message": "Verify cif:util_functions/import_swrs_operators_from_fdw on pg"
    },
    {
      "message": "Verify cif:util_functions/import_swrs_operators_from_fdw on pg"
    },
    {
      "message": "Verify cif:database_functions/read_only_user_policies on pg"
    },
    {
      "message": "Verify cif:database_functions/upsert_policy on pg"
    },
    {
      "message": "Verify cif:database_functions/upsert_timestamp_columns on pg"
    },
    {
      "message": "Verify cif:util_functions/verify_function_not_present on pg"
    },
    {
      "message": "Verify cif:util_functions/verify_function_not_present on pg"
    },
    {
      "message": "Verify cif:database_functions/verify_grants on pg"
    },
    {
      "message": "Verify cif:database_functions/verify_policy on pg"
    },
    {
      "message": "Verify cif:database_functions/verify_policy_not_present on pg"
    },
    {
      "message": "Verify cif:database_functions/verify_type_not_present on pg"
    }
  ]
}
